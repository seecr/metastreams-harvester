## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page2

def getStatus(domainId, repositoryGroupId, repositoryId):
    statuses = observable.call.getStatus(domainId=domainId, repositoryGroupId=repositoryGroupId, repositoryId=repositoryId)
    return statuses

def totalErrors(domainId, repositoryGroupId=None, repositoryId=None):
    return sum(int(each['totalerrors']) for each in getStatus(domainId, repositoryGroupId, repositoryId))

def main(tag, showRss=False, **kwargs):
    if not (data := page2.findPath("data", dict(error=render_data_error), **kwargs)) is None:
        yield data(tag=tag, **kwargs)
        return
     
    aliases = observable.call.get_domain_aliases()

    pathArgs = kwargs['path'].split("/")[2:]
    if pathArgs == []:
        arguments = kwargs['arguments']
        domainId = arguments.get('domainId', [None])[0]
        repositoryGroupId = arguments.get('repositoryGroupId', [None])[0]
        repositoryId = arguments.get('repositoryId', [None])[0]
    else:
        pathArgs = pathArgs + [None, None, None]
        domainId, repositoryGroupId, repositoryId = pathArgs[:3]
    
    domainId = aliases.get(domainId, domainId)
    statuses = getStatus(domainId=domainId, repositoryGroupId=repositoryGroupId, repositoryId=repositoryId)


    groups = observable.call.groupsForDomainId(domainId)

    with tag("div"):
        with tag("div.modal", tabindex="-1", role="dialog", id_="modal_error"):
            with tag("div.modal-dialog.modal-xl"):
                with tag("div.modal-content"):
                    with tag("div.modal-header"):
                        with tag("h5.modal-title", id_="placeholder_modal-error-title"):
                            yield ""
                        with tag("button.btn-close", type_="button", **{"data-bs-dismiss": 'modal', 'aria-label': 'Close'}):
                            pass
                    with tag("div.modal-body", id_="placeholder_modal-error-body"):
                        pass

        if showRss is True:
            with tag("div.d-flex.flex-row.justify-content-between"):
                with tag("h1"):
                    yield "Harvester Status"
                with tag("div"):
                    for each in groups:
                        with tag("img", src=each.logoUrl, style="height: 50px"): pass
            with tag("div.d-flex.flex-row.gap-2"):
                with tag("a.btn.btn-light", href=page2.url(f"/running.rss/{domainId}"), target="_blank"):
                    with tag("i.bi.bi-rss.pe-2"): pass
                    yield f"Domain: {domainId}"
                if repositoryGroupId is not None:
                    with tag("a.btn.btn-light", href=page2.url(f"/rss/{domainId}/{repositoryGroupId}"), target="_blank"):
                        with tag("i.bi.bi-rss.pe-2"): pass
                        yield f"Repository group: {repositoryGroupId}"
                #if repositoryId is not None:
                #    with tag("span.btn.btn-light"):
                #        yield f"Repository: {repositoryId}"

        with tag("table.table.table-hover", id_="status-table"):
            with tag("thead"):
                with tag("tr"):
                    for each in ["Repository", "Laatste harvest", "# Totaal", "# Geharvest", "# Uploads", "# Deletes", "# Ongeldig", "# Fouten"]:
                        with tag("th"):
                            yield each
                    if showRss:
                        with tag("th"):
                            yield ""
            with tag("tbody"):
                for each in sorted(statuses, key=lambda s: (s.get('repositoryGroupId', '').lower(), s.get('repositoryId'))):
                    with tag("tr"):
                        with tag("td"):
                            yield each['repositoryId']
                        with tag("td"):
                            yield each['lastHarvestDate'] or "---"
                        with tag("td"):
                            yield each['total']
                        with tag("td"):
                            yield each['harvested']
                        with tag("td"):
                            yield each['uploaded']
                        with tag("td"):
                            yield each['deleted']
                        with tag("td"):
                            invalid = each['invalid']
                            yield invalid
                        with tag("td"):
                            errors = each['totalerrors']
                            with tag("div.d-flex.flex-row"):
                                with tag("span.flex-fill"): yield errors
                                if errors > 0:
                                    with tag("span.flex-fill"):
                                        with tag("button.seecr-btn.seecr-show-error", **{
                                                'data-domainid': domainId,
                                                'data-repositorygroupid': each['repositoryGroupId'],
                                                'data-repositoryid': each['repositoryId']}):
                                            with tag("i.bi.bi-eye-fill"): yield ""
                        if showRss is True:
                            with tag("td"):
                                with tag("a.btn.btn-light", href=page2.url(f"/rss/{domainId}/{each['repositoryGroupId']}/{each['repositoryId']}"), target="_blank"):
                                    with tag("i.bi.bi-rss"): pass


    return 
    data = {"data": []}
    for each in statuses:

        data['data'].append([each[i] for i in ['repositoryId', 'lastHarvestDate', 'harvested', 'uploaded', 'deleted', 'invalid', 'totalerrors']])
    yield "HTTP/1.0 200 OK\r\n"
    yield "Content-Type: application/json\r\n"
    yield "\r\n"
    yield dumps(data)

def render_data_error(tag, arguments, **kwargs):

    domainId = arguments.get('domainId', [None])[0]
    repositoryGroupId = arguments.get('repositoryGroupId', [None])[0]
    repositoryId = arguments.get('repositoryId', [None])[0]
    statuses = observable.call.getStatus(domainId=domainId, repositoryGroupId=repositoryGroupId, repositoryId=repositoryId)

    with tag("div.d-flex.flex-column"):
        for each in statuses:
            if len(errors := each.get('recenterrors', [])) == 0:
                continue
            for error in errors:
                print(error['error'])
                with tag("h3"): yield error['date']
                with tag("pre"):
                    yield error['error'].replace("|", "\n")
        

