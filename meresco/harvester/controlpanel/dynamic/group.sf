## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page2

def main(**kwargs):
    user = kwargs['session'].get('user')
    if not user or not user.isAdmin():
        yield http.redirect('/')
        return

    card = page2.findPath("card", dict(
        users=card_users,
        domains=card_domains), **kwargs)
    if not card is None:
        yield card(**kwargs)
        return

    yield page2.render(
        _contents,
        additionalScripts=['/static/group.js'],
        **kwargs)

def _contents(tag, arguments, **kwargs):
    groupId = arguments.get("id", [None])[0]
    group = None if groupId is None else observable.call.getGroup(groupId)
    if group is None:
        with tag("span"):
            yield "Groep niet gevonden"
            return

    with tag("div.row.row-cols-1.row-cols-md-3.g-4"):
        with tag("div.col"):
            yield page2.card("Groep", cardGroup, icon="journal-text", tag=tag, group=group, **kwargs)
        with tag("div.col"):
            yield page2.card("Domeinen", cardDomains, icon="collection", tag=tag, group=group, **kwargs)
        with tag("div.col"):
            yield page2.card("Gebruikers", cardUsers, icon="person", tag=tag, group=group, **kwargs)


def cardGroup(tag, group, **kwargs):
    with tag("div", id_="placeholder_groupcard"):
        yield card_group(tag, group, **kwargs)

def card_group(tag, group, **kwargs):
    with tag("form.form", id_="FrmUpdateGroup"):
        with tag("input", type_="hidden", name="identifier", value=group.identifier): pass
        with tag("div.row"):
            with tag("div.col-auto"):
                with tag("label.col-form-label", for_="naam"): yield "Naam"
            with tag("div.col"):
                with tag("input.form-control", id_="naam", type_="text", name="name", value=group.name): pass
        with tag("div.row"):
            with tag("div.col.mt-3"):
                with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnUpdateGroup"):
                    yield "Aanpassen"

# ---------- Domains
def cardDomains(tag, group, **kwargs):
    with tag("div", id_='placeholder_domainscard'):
        yield card_domains(tag, group, **kwargs)

def card_domains(tag, group=None, **kwargs):
    if group is None:
        identifier = kwargs.get("arguments", {}).get("groupId", [None])[0]
        group = observable.call.getGroup(identifier)

    allDomainIds = observable.call.getDomainIds()
    domainIdsNotInGroup = sorted([each for each in allDomainIds if not each in group.domainIds])
    if len(domainIdsNotInGroup) > 0:
        with tag("form.form", id_="FrmAddDomainIdToGroup"):
            with tag("input", type_="hidden", name="groupId", value=group.identifier): pass
            with tag("div.row"):
                with tag("div.col"):
                    with tag("select.form-select", name="domainId"):
                        for each in domainIdsNotInGroup:
                            with tag("option", value=each):
                                yield each
                with tag("div.col-auto"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnAddDomainIdToGroup"):
                        yield "Toevoegen"

    if len(group.domainIds) == 0:
        with tag("div.alert.alert-info.mt-3"):
            with tag("i.bi-info-circle"): pass
            with tag("span.ps-2"):
                yield "Geen domeinen in deze groep."
            return

    with tag("table.table.table-sm.table-hover", id_="TblGroupDomains"):
        with tag("thead"):
            for label in ['', 'Naam']:
                with tag("th"): yield label
        with tag("tbody"):
            for each in sorted(group.domainIds):
                with tag("tr"):
                    with tag("td.fit"):
                        with tag("form"):
                            with tag("input", type_="hidden", name="groupId", value=group.identifier): pass
                            with tag("input", type_="hidden", name="domainId", value=each): pass
                            with tag("button.seecr-btn.deletable", title="Uit groep verwijderen"):
                                with tag("i.bi-trash-fill"): pass
                    with tag("td"):
                        yield each

# ---------- Users
def cardUsers(tag, group, **kwargs):
    with tag("div", id_='placeholder_userscard'):
        yield card_users(tag, group, **kwargs)

def card_users(tag, group=None, **kwargs):
    if group is None:
        identifier = kwargs.get("arguments", {}).get("groupId", [None])[0]
        group = observable.call.getGroup(identifier)

    allUsernames = observable.call.listUsernames()
    usersNotInGroup = sorted([username for username in allUsernames if not username in group.usernames])
    if len(usersNotInGroup) > 0:
        with tag("form.form", id_="FrmAddUserToGroup"):
            with tag("input", type_="hidden", name="groupId", value=group.identifier): pass
            with tag("div.row"):
                with tag("div.col"):
                    with tag("select.form-select", name="username"):
                        for each in usersNotInGroup:
                            with tag("option", value=each):
                                yield each
                with tag("div.col-auto"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnAddUserToGroup"):
                        yield "Toevoegen"

    if len(group.usernames) == 0:
        with tag("div.alert.alert-info.mt-3"):
            with tag("i.bi-info-circle"): pass
            with tag("span.ps-2"):
                yield "Geen gebruikers in deze groep."
            return

    with tag("table.table.table-sm.table-hover", id_='TblGroupUsers'):
        with tag("thead"):
            for label in ['', 'Naam']:
                with tag("th"): yield label
        with tag("tbody"):
            for username in sorted(group.usernames):
                with tag("tr"):
                    with tag("td.fit"):
                        with tag("form"):
                            with tag("input", type_="hidden", name="groupId", value=group.identifier): pass
                            with tag("input", type_="hidden", name="username", value=username): pass
                            with tag("button.seecr-btn.deletable", title="Uit groep verwijderen"):
                                with tag("i.bi-trash-fill"): pass
                    with tag("td"):
                        yield username
