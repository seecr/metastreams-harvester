## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##


import page2

TARGET_TYPES = dict(
    sruUpdate="SRU Update Target",
    filesystem="File System",
    composite="Multiple Targets",
)

def main(**kwargs):
    sub = page2.findPath(
        "table", dict(
            repositoryGroup=table_repositoryGroups,
            targets=table_targets,
            mappings=table_mappings,),
        **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return

    sub = page2.findPath(
        "popup", dict(
            target=popup_target,
            mapping=popup_mapping,),
        **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return

    yield page2.render(
        _content,
        additionalScripts=[
            '/static/domain.js',
        ],
        **kwargs)


def _content(tag, arguments, **kwargs):
    domainId = arguments.get("identifier", [None])[0]
    domain = observable.call.getDomain(domainId)

    yield page2.card(f"Domein Gegevens - {domainId}", card_domainAttributes, tag=tag, domain=domain, **kwargs)
    yield page2.card("Repository Groepen", card_domainRepositoryGroups, tag=tag, domain=domain, **kwargs)
    with tag("div.row"):
        with tag("div.col"):
            yield page2.card("Targets", card_domainTargets, tag=tag, domain=domain, **kwargs)
        with tag("div.col"):
            yield page2.card("Mappings", card_domainMappings, tag=tag, domain=domain, **kwargs)


def card_domainAttributes(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    uniqueId = uuid()
    with tag("div", id_="placeholder_FrmDomainAttributes"):
        with tag("form.form", id_="FrmDomainAttributes"):
            with tag("input", type_="hidden", name="identifier", value=domainId): pass
            with tag("div.row"):
                with tag("div.col-3"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Omschrijving"
                with tag("div.col-9"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="description", value=domain.get("description")): pass

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnDomainAttributes"):
                        yield "Aanpassen"


def card_domainRepositoryGroups(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    uniqueId = uuid()
    with tag("div", id_="placeholder_FrmCreateRepositoryGroup"):
        with tag("form.form", id_="FrmCreateRepositoryGroup", **{'data-domainId': domainId}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                with tag("div.col-3"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Identifier"
                with tag("div.col-9"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="identifier", value=""): pass

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateRepositoryGroup"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_repositorygroups"):
        yield table_repositoryGroups(tag, domain=domain, **kwargs)


def table_repositoryGroups(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ["", "Identifier", "Naam"])
        with tag("tbody"):
            for groupId in sorted(domain.get('repositoryGroupIds', []), key=lambda x:str(x).lower()):
                repositoryGroup = observable.call.getRepositoryGroup(identifier=groupId, domainId=domainId)
                with tag("tr"):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{'data-domainId': domainId, 'data-groupId': groupId}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        with tag("a", href=page2.url("/repositoryGroup",
                            identifier=repositoryGroup['identifier'],
                            domainId=domainId)):
                            yield repositoryGroup.get('identifier')
                    with tag("td"):
                        yield repositoryGroup.get("name", {}).get("nl", '')


def card_domainTargets(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmCreateTarget"):
        with tag("form.form", id_="FrmCreateTarget", **{'data-domainId': domainId}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                uniqueId = uuid()
                with tag("div.col-2"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Naam"
                with tag("div.col-4"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="name", value=""): pass

                uniqueId = uuid()
                with tag("div.col-2"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Type"
                with tag("div.col-4"):
                    with tag("select.form-control", name="targetType"):
                        for key in sorted(TARGET_TYPES.keys()):
                            with tag("option", value=key):
                                yield TARGET_TYPES[key]

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateTarget"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_targets"):
        yield table_targets(tag, domain=domain, **kwargs)

def table_targets(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ["", "Naam", "Type"])
        with tag("tbody"):
            targets = [observable.call.getTarget(identifier=each, domainId=domainId) for each in domain.get('targetIds', [])]
            for target in sorted(targets, key=lambda x:x['name'].lower()):
                with tag("tr.clickable-row", **{'data-domainid': domainId, 'data-targetid': target.get('identifier')}):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{
                                'data-domainid': domainId,
                                'data-targetid': target.get('identifier')}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield target.get('name')
                    with tag("td"):
                        yield TARGET_TYPES.get(target.get('targetType'), "--")

def popup_target(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    targetId = arguments.get("identifier", [None])[0]
    target = observable.call.getTarget(identifier=targetId, domainId=domainId)
    domain = observable.call.getDomain(domainId)

    def targetType_sruUpdate(tag, target, domain):
        with tag("div.row.mt-3"):
            with tag("div.col-3"):
                with tag("label.col-form-label"): yield "Hostname"
            with tag("div.col"):
                with tag("input.form-control", type_="text", name="baseurl", value=target.get("baseurl", "")): pass
        with tag("div.row.mt-3"):
            with tag("div.col-3"):
                with tag("label.col-form-label"): yield "Port"
            with tag("div.col"):
                with tag("input.form-control", type_="text", name="port", value=target.get("port", "")): pass
        with tag("div.row.mt-3"):
            with tag("div.col-3"):
                with tag("label.col-form-label"): yield "Path"
            with tag("div.col"):
                with tag("input.form-control", type_="text", name="path", value=target.get("path", "")): pass

    def targetType_filesystem(tag, target, domain):
        with tag("div.row.mt-3"):
            with tag("div.col-3"):
                with tag("label.col-form-label"): yield "Path"
            with tag("div.col"):
                with tag("input.form-control", type_="text", name="path", value=target.get("path", "")): pass
        with tag("div.row.mt-3"):
            with tag("div.col-3"):
                with tag("label.col-form-label"): yield "OAI Envelope"
            with tag("div.col.d-flex.align-items-center"):
                with tag("div.form-check.form-switch"):
                    with tag("input.form-check-input",
                        type_="checkbox",
                        name="oaiEnvelope",
                        checked="checked" if target.get("oaiEnvelope", False) is True else ""): pass

    def targetType_composite(tag, target,  domain):
        otherTargets = [observable.call.getTarget(identifier=each, domainId=domain.get('identifier'))
            for each in domain.get('targetIds') if each != target.get('identifier')]

        with tag("div.row.mt-3"):
            with tag("div.col-3"):
                with tag("label.col-form-label"): yield "Target"
            with tag("div.col"):
                with tag("select.form-select", multiple="multiple", size="3", name="delegate"):
                    selectedTargets = target.get('delegateIds', [])
                    for each in otherTargets:
                        targetId = each.get("identifier")
                        with tag("option", value=targetId, selected="selected" if targetId in selectedTargets else ""):
                            yield each.get("name")
                with tag("small"):
                    yield "hold CTRL/CMD to select multiple targets"


    with tag("div", id_="placeholder_FrmUpdateTarget"):
        with tag("form.form", id_="FrmUpdateTarget"):
            with tag("input", type_="hidden", name="identifier", value=targetId): pass
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("input", type_="hidden", name="targetType", value=target.get("targetType")): pass
            with tag("div.row"):
                with tag("div.col-3"):
                    with tag("label.col-form-label"): yield "Naam"
                with tag("div.col"):
                    with tag("input.form-control", type_="text", name="name", value=target.get("name", "")): pass
            with tag("div.row.mt-3"):
                with tag("div.col-3"):
                    with tag("label.col-form-label"): yield "Type"
                with tag("div.col"):
                    with tag("label.col-form-label"): yield TARGET_TYPES[target.get("targetType")]
            targetRenderer = dict(
                sruUpdate=targetType_sruUpdate,
                filesystem=targetType_filesystem,
                composite=targetType_composite).get(target.get("targetType"))
            yield targetRenderer(tag, target=target, domain=domain)

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-primary.float-end", id_="BtnUpdateTarget"):
                        yield "Opslaan"



def card_domainMappings(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmCreateMapping"):
        with tag("form.form", id_="FrmCreateMapping", **{'data-domainId': domainId}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                uniqueId = uuid()
                with tag("div.col-2"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Naam"
                with tag("div.col-4"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="name", value=""): pass

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateMapping"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_mappings"):
        yield table_mappings(tag, domain=domain, **kwargs)

def table_mappings(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ["", "Naam"])
        with tag("tbody"):
            mappings = [observable.call.getMapping(identifier=each, domainId=domainId) for each in domain.get('mappingIds',[])]
            for mapping in sorted(mappings, key=lambda x:x['name'].lower()):
                with tag("tr.clickable-row", **{'data-domainid': domainId, 'data-mappingId': mapping.get('identifier')}):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{
                                'data-domainid': domainId,
                                'data-mappingid': mapping.get('identifier')}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield mapping.get('name')

def popup_mapping(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    mappingId = arguments.get("identifier", [None])[0]
    mapping = observable.call.getMapping(identifier=mappingId, domainId=domainId)
    domain = observable.call.getDomain(domainId)

    with tag("div", id_="placeholder_FrmUpdateMapping"):
        with tag("form.form", id_="FrmUpdateMapping"):
            with tag("input", type_="hidden", name="identifier", value=mappingId): pass
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                with tag("div.col-3"):
                    with tag("label.col-form-label"): yield "Naam"
                with tag("div.col"):
                    with tag("input.form-control", type_="text", name="name", value=mapping.get("name", "")): pass
            with tag("div.row.mt-3"):
                with tag("div.col-3"):
                    with tag("label.col-form-label"): yield "Omschrijving"
                with tag("div.col"):
                    with tag("textarea.form-control", name="description", rows="3"):
                        yield mapping.get("description", "")

            with tag("div.row.mt-3"):
                with tag("div.col-3"):
                    with tag("label.col-form-label"): yield "Code"
                with tag("div.col"):
                    with tag("textarea.form-control.font-monospace.fs-6", id_="mapping-code", name="code", rows="10", wrap="off"):
                        yield mapping.get("code", "")

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-primary.float-end", id_="BtnUpdateMapping"):
                        yield "Opslaan"

