## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##


import page2

def main(**kwargs):
    sub = page2.findPath(
        "table",
        dict(
            repositoryGroup=table_repositoryGroups,
            targets=table_targets,
            mappings=table_mappings,
        ),
        **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return



    yield page2.render(
        _content,
        additionalScripts=[
            '/static/domain.js'
        ],
        **kwargs)


def _content(tag, arguments, **kwargs):
    domainId = arguments.get("identifier", [None])[0]
    domain = observable.call.getDomain(domainId)

    yield page2.card(f"Domein Gegevens - {domainId}", card_domainAttributes, tag=tag, domain=domain, **kwargs)
    yield page2.card("Repository Groepen", card_domainRepositoryGroups, tag=tag, domain=domain, **kwargs)
    yield page2.card("Targets", card_domainTargets, tag=tag, domain=domain, **kwargs)
    yield page2.card("Mappings", card_domainMappings, tag=tag, domain=domain, **kwargs)


def card_domainAttributes(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    uniqueId = uuid()
    with tag("form.form", id_="FrmDomainAttributes"):
        with tag("input", type_="hidden", name="identifier", value=domainId): pass
        with tag("div.row"):
            with tag("div.col-3"):
                with tag("label.col-form-label", for_=uniqueId): yield "Omschrijving"
            with tag("div.col-9"):
                with tag("input.form-control", id_=uniqueId, type_="text", name="description", value=domain.get("description")): pass

        with tag("div.row.mt-3"):
            with tag("div.col"):
                with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnDomainAttributes"):
                    yield "Aanpassen"


def card_domainRepositoryGroups(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    uniqueId = uuid()
    with tag("div", id_="placeholder_FrmCreateRepositoryGroup"):
        with tag("form.form", id_="FrmCreateRepositoryGroup", **{'data-domainId': domainId}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                with tag("div.col-3"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Identifier"
                with tag("div.col-9"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="identifier", value=""): pass

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateRepositoryGroup"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_repositorygroups"):
        yield table_repositoryGroups(tag, domain=domain, **kwargs)


def table_repositoryGroups(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    with tag("table.table.table-sm.table-hover"):
        with tag("thead"):
            with tag("tr"):
                with tag("th"): yield ""
                with tag("th"): yield "Identifier"
                with tag("th"): yield "Naam"
        with tag("tbody"):

            for groupId in sorted(domain.get('repositoryGroupIds', []), key=lambda x:str(x).lower()):
                repositoryGroup = observable.call.getRepositoryGroup(identifier=groupId, domainId=domainId)
                with tag("tr"):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{'data-domainId': domainId, 'data-groupId': groupId}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        with tag("a", href=page2.url("/repositoryGroup",
                            identifier=repositoryGroup['identifier'],
                            domainId=domainId)):
                            yield repositoryGroup.get('identifier')
                    with tag("td"):
                        yield repositoryGroup.get("name", {}).get("nl", '')


def card_domainTargets(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmCreateTarget"):
        with tag("form.form", id_="FrmCreateTarget", **{'data-domainId': domainId}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                uniqueId = uuid()
                with tag("div.col-2"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Naam"
                with tag("div.col-4"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="name", value=""): pass

                uniqueId = uuid()
                with tag("div.col-2"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Type"
                with tag("div.col-4"):
                    with tag("select.form-control", name="targetType"):
                        for key in sorted(TARGET_TYPES.keys()):
                            with tag("option", value=key):
                                yield TARGET_TYPES[key]

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateTarget"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_targets"):
        yield table_targets(tag, domain=domain, **kwargs)

def table_targets(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")
    with tag("table.table.table-sm.table-hover"):
        with tag("thead"):
            with tag("tr"):
                for each in ["", "Naam", "Type"]:
                    with tag("th"): yield each
        with tag("tbody"):
            targets = [observable.call.getTarget(identifier=each, domainId=domainId) for each in domain['targetIds']]
            for target in sorted(targets, key=lambda x:x['name'].lower()):
                with tag("tr"):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{
                                'data-domainid': domainId,
                                'data-targetid': target.get('identifier')}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        with tag("a", href=page2.url("/target", identifier=target['identifier'])):
                            yield target.get('name')
                    with tag("td"):
                        yield TARGET_TYPES.get(target.get('targetType'), "--")

TARGET_TYPES = dict(
    sruUpdate="SRU Update Target",
    filesystem="File System",
    composite="Multiple Targets",
)

def card_domainMappings(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmCreateMapping"):
        with tag("form.form", id_="FrmCreateMapping", **{'data-domainId': domainId}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                uniqueId = uuid()
                with tag("div.col-2"):
                    with tag("label.col-form-label", for_=uniqueId): yield "Naam"
                with tag("div.col-4"):
                    with tag("input.form-control", id_=uniqueId, type_="text", name="name", value=""): pass


            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateMapping"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_mappings"):
        yield table_mappings(tag, domain=domain, **kwargs)

def table_mappings(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")
    with tag("table.table.table-sm.table-hover"):
        with tag("thead"):
            with tag("tr"):
                with tag("th"): yield "Naam"
        with tag("tbody"):
            mappings = [observable.call.getMapping(identifier=each, domainId=domainId) for each in domain['mappingIds']]
            for mapping in sorted(mappings, key=lambda x:x['name'].lower()):
                with tag("tr"):
                    with tag("td"):
                        with tag("a", href=page2.url("/mapping", identifier=mapping['identifier'])):
                            yield mapping.get('name')


def old():
    """
<div>
    <h3>Repository Groups</h3>
    <form action='/actions/addRepositoryGroup' method='post'>
        <input type="hidden" name="redirectUri" value="{repositoryGroupLink}"/>
        <input type="hidden" name="domainId" value="{domainIdentifier}"/>
        <input type="hidden" name="referer" value="{referer}"/>
        <table width="320" border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td width="60">Name:</td>
                <td width="200"><input name="identifier" type="text" class="zkveld" value=""></td>
                <td width="40"><input name="submit" type="submit" class="butt" value="Create Repository Group"></td>
            </tr>
        </table>
    </form>

    <table width="100%" border="0" cellspacing="0" cellpadding="0">""".format(
        domainIdentifier=domainIdentifier,
        domainDescription=domain.get("description") or "",
        referer='/domain?'+urlencode({'identifier':domainIdentifier}),
        domainEditLink="/domain?{}".format(urlencode(dict(domainId=domainIdentifier))),
        repositoryGroupLink="/repositoryGroup?{}".format(urlencode(dict(domainId=domainIdentifier))))

    for groupId in sorted(domain.get('repositoryGroupIds', []), key=lambda x:str(x).lower()):
        repositoryGroup = observable.call.getRepositoryGroup(identifier=groupId, domainId=domainIdentifier)
        name = repositoryGroup.get('name', {}).get('nl', '')

        yield """
        <tr class="table_row">
            <td width="60%">{name} ({groupId})</td>
            <td><a href="{repositoryGroupEditLink}">Edit / View</a></td>
            <td>
                <form method='post' action='/actions/deleteRepositoryGroup' name="{deleteFormName}">
                    <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
                    <input type="hidden" name="domainId" value="{domainIdentifier}"/>
                    <input type="hidden" name="referer" value="/domain"/>
                    <input type="hidden" name="identifier" value="{groupId}"/>
                    <a onclick="if(confirm('Weet u het zeker?')) {{ document.{deleteFormName}.submit();}}; return false;">Delete</a>
                </form>
            </td>
        </tr>""".format(
        name=name,
        groupId=groupId,
        domainEditLink="/domain?{}".format(urlencode(dict(identifier=domainIdentifier))),
        repositoryGroupEditLink="/repositoryGroup?{}".format(urlencode(dict(domainId=domainIdentifier, identifier=groupId))),
        deleteFormName="deleteRepositoryGroup_{}".format(groupId.replace("-", "_")),
        domainIdentifier=domainIdentifier,
        )

    yield """
    </table>
</div>

<div>
    <h3>Targets</h3>"""
    if isAdmin:
        yield """
 <form action='/actions/addTarget' method='post'>
   <input type="hidden" name="redirectUri" value="{targetEditLink}"/>
   <input type="hidden" name="referer" value="{referer}"/>
   <input type="hidden" name="domainId" value="{domainIdentifier}"/>
   <table width="320" border="0" cellspacing="0" cellpadding="0">
    <tr>
     <td width="60">Name:</td>
     <td width="200"><input name="name" type="text" class="zkveld" value=""></td>
     <td width="60">Type:</td>
     <td>""".format(
         targetEditLink="/target?{}".format(urlencode(dict(referrerDomain=domainIdentifier))),
         referer='/domain?'+urlencode({'identifier':domainIdentifier}),
         domainIdentifier=domainIdentifier,
    )

        yield common.dropdown("targetType", target.TYPES.items(), None)
        yield """
     </td>
     <td width="40"><input name="submit" type="submit" class="butt" value="Create Target"></td>
    </tr>
   </table>
 </form>"""

    yield """
  <table width="100%" border="0" cellspacing="0" cellpadding="0">"""

    for targetId in domain.get('targetIds', []):
        name = observable.call.getTarget(domainId=domainIdentifier, identifier=targetId).get('name', '')
        yield """
   <tr class="table_row">
    <td width="60%">{name}</td>
    <td><a href="{targetEditLink}">{label}</a></td>""".format(
            name=name,
            targetEditLink="/target?{}".format(urlencode(dict(identifier=targetId, referrerDomain=domainIdentifier))),
            label="Edit / View" if isAdmin else "View"
        )

        if isAdmin:
            yield """
    <td>
     <form method='post' action='/actions/deleteTarget' name="{formName}">
        <input type="hidden" name="referer" value="/domain"/>
        <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
        <input type="hidden" name="domainId" value="{domainIdentifier}"/>
        <input type="hidden" name="identifier" value="{targetId}"/>
     <a onclick="if(confirm('Weet u het zeker?')) {{ document.{formName}.submit(); }}; return false;">
        Delete
     </a>
     </form>
    </td>""".format(
            formName="deleteTarget_{}".format(targetId.replace("-", "")),
            domainEditLink="/domain?{}".format(urlencode(dict(identifier=domainIdentifier))),
            domainIdentifier=domainIdentifier,
            targetId=targetId,
        )
        yield """
   </tr>"""
    yield """
  </table>
</div>


<div><h3>Mappings</h3>"""
    if isAdmin:
        yield """
 <form action='/actions/addMapping' method='post'>
   <input type="hidden" name="referer" value="{referer}"/>
   <input type="hidden" name="redirectUri" value="{mappingEditLink}"/>
   <input type="hidden" name="domainId" value="{domainIdentifier}"/>
   <table width="320" border="0" cellspacing="0" cellpadding="0">
    <tr>
     <td width="60">Name:</td>
     <td width="200"><input name="name" type="text" class="zkveld" value=""></td>
     <td width="40"><input name="submit" type="submit" class="butt" value="Create Mapping"></td>
    </tr>
   </table>
 </form>""".format(
         mappingEditLink="/mapping?{}".format(urlencode(dict(referrerDomain=domainIdentifier))),
         referer='/domain?'+urlencode({'identifier':domainIdentifier}),
         domainIdentifier=domainIdentifier,
         )
    yield """
  <table width="100%" border="0" cellspacing="4" cellpadding="0">"""

    for mappingId in domain.get('mappingIds', []):
        name = observable.call.getMapping(domainId=domainIdentifier, identifier=mappingId).get('name', '')
        yield """
   <tr class="table_row">
    <td width="60%">{name}</td>
    <td><a href="{mappingEditLink}">{label}</a></td>""".format(
            name=name,
            mappingEditLink="/mapping?{}".format(urlencode(dict(identifier=mappingId, referrerDomain=domainIdentifier))),
            label="Edit / View" if isAdmin else "View",
        )
        if isAdmin:
            yield """
    <td>
      <form method='post' action='/actions/deleteMapping' name="{formName}">
        <input type="hidden" name="referer" value="/domain"/>
        <input type="hidden" name="redirectUri" value="{domainEditLink}"/>
        <input type="hidden" name="domainId" value="{domainIdentifier}"/>
        <input type="hidden" name="identifier" value="{mappingId}"/>
     <a onclick="if(confirm('Weet u het zeker?')) {{ document.{formName}.submit(); }}; return false;">Delete</a>
     </form>
    </td>""".format(
            formName="deleteMapping_{}".format(mappingId.replace("-", "")),
            domainEditLink="/domain?{}".format(urlencode(dict(identifier=domainIdentifier))),
            domainIdentifier=domainIdentifier,
            mappingId=mappingId
        )
        yield """
    <td><a href="{mappingUrl}">Test</a></td>
   </tr>""".format(mappingUrl="/testmapping?{}".format(urlencode(dict(mappingId=mappingId, referrerDomain=domainIdentifier))))
    yield """
  </table>
</div>"""

    yield common.showStatusFor(domainIdentifier, "domain")

    if isAdmin:
        yield """<p><a href="/domains">Back to Domains &amp; Users</a></p>"""
