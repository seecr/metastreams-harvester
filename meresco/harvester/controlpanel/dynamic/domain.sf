## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##


import page2

TARGET_TYPES = dict(
    sruUpdate="SRU Update Target",
    filesystem="File System",
    composite="Multiple Targets",
)

def main(**kwargs):
    sub = page2.findPath(
        "table", dict(
            repositoryGroup=table_repositoryGroups,
            targets=table_targets,
            mappings=table_mappings,),
        **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return

    sub = page2.findPath(
        "popup", dict(
            target=popup_target,
            mapping=popup_mapping,),
        **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return

    yield page2.render(
        _content,
        additionalScripts=[
            '/static/status.js',
            '/static/domain.js',
        ],
        **kwargs)


def _content(tag, arguments, **kwargs):
    user = kwargs['user']
    domainId = arguments.get("identifier", [None])[0]
    domain = observable.call.getDomain(domainId)

    yield page2.breadcrumbs(tag, [
        dict(label="Domeinen", href="/domains"),
        dict(label=domainId, active=True)
    ])
    yield page2.card(f"Domein Gegevens - {domainId}", card_domainAttributes, tag=tag, domain=domain, **kwargs)
    yield page2.card("Repository Groepen",
        card_domainRepositoryGroups, tag=tag, domain=domain,
        link=dict(
            func=btn_status,
            kwargs=dict(tag=tag, domainId=domainId)),
        **kwargs)
    with tag("div.row"):
        with tag("div.col"):
            yield page2.card("Targets", card_domainTargets, tag=tag, domain=domain, **kwargs)
        with tag("div.col"):
            yield page2.card("Mappings", card_domainMappings, tag=tag, domain=domain, **kwargs)
    if user.isAdmin():
        yield page2.card("Field definition", card_fieldDefinition, tag=tag, domain=domain, **kwargs)

def btn_status(tag, domainId):
    with tag("div"):
        with tag("button.btn.seecr-btn.p-0.button-status", title="Status", **{
            'data-caption': f'Status domein {domainId}',
            'data-domainid': domainId,
            }):
            with tag("i.bi.bi-graph-up"):
                yield ''

def card_domainAttributes(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    uniqueId = uuid()
    with tag("div", id_="placeholder_FrmDomainAttributes"):
        with tag("form.form", id_="FrmDomainAttributes", ):
            with tag("input", type_="hidden", name="identifier", value=domainId): pass
            with tag("div.row.mb-2"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Omschrijving", name="description", value=domain.get("description"))
            with tag("div.row"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnDomainAttributes"):
                        yield "Aanpassen"

def card_domainRepositoryGroups(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    uniqueId = uuid()
    with tag("div", id_="placeholder_FrmCreateRepositoryGroup"):
        with tag("form.form", id_="FrmCreateRepositoryGroup", **{'data-domainId': domainId, 'data-reset-on-submit': 'True'}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.d-flex.flex-row"):
                with tag("div.flex-fill.me-2"):
                    yield page2.textInput(tag, label="Identifier", name="identifier", value="")
                with tag("div.d-flex.flex-column.flex-shrink-1.justify-content-end"):
                    with tag("button.btn.btn-small.btn-primary", type_="submit", id_="BtnCreateRepositoryGroup"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_repositorygroups"):
        yield table_repositoryGroups(tag, domain=domain, **kwargs)

def card_fieldDefinition(tag, domain, **kwargs):
    domainId = domain["identifier"]
    fieldDefinition = observable.call.getFieldDefinition(domainId=domainId)
    with tag("div", id_="placeholder_FrmFieldDefinition"):
        with tag("form.form", id_="FrmFieldDefinition"):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.d-flex.flex-column"):
                with tag("div"):
                    value = dumps(fieldDefinition, indent=2)
                    height = '40em' if value.count('\n') > 10 else '10em'
                    yield page2.textarea(tag, label='Field Definition', name='fieldDefinition', value=value, height=height)
                with tag("div.d-flex.flex-row-reverse.mt-2"):
                    with tag("button.btn.btn-small.btn-primary", type_="submit", id_="BtnFieldDefinition"):
                        yield "Opslaan"


def table_repositoryGroups(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")
    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ["", "Identifier", "Naam", "Repositories"])
        with tag("tbody"):
            repositoryGroups = [observable.call.getRepositoryGroup(identifier=groupId, domainId=domainId) for groupId in domain.get('repositoryGroupIds', [])]
            for repositoryGroup in sorted(repositoryGroups, key=lambda rg: rg.get("name", {}).get("nl", "")):
                rgIdentifier = repositoryGroup['identifier']
                with tag("tr"):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{'data-domainId': domainId, 'data-groupId': rgIdentifier}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        with tag("a", href=page2.url("/repositoryGroup",
                            identifier=rgIdentifier,
                            domainId=domainId)):
                            yield rgIdentifier
                    with tag("td"):
                        yield repositoryGroup.get("name", {}).get("nl", '')
                    with tag("td"):
                        yield len(repositoryGroup.get('repositoryIds') or [])


def card_domainTargets(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmCreateTarget"):
        with tag("form.form", id_="FrmCreateTarget", **{'data-domainId': domainId, 'data-reset-on-submit': 'True'}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Naam", name="name", value="")
                with tag("div.col"):
                    yield page2.dropdown(tag,
                        label="Type", name="targetType",
                        items=sorted(TARGET_TYPES.items(), key=lambda item: item[1]))

                with tag("div.col-2.d-flex.flex-column.justify-content-end"):
                    with tag("button.btn.btn-small.btn-primary", type_="submit", id_="BtnCreateTarget"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_targets"):
        yield table_targets(tag, domain=domain, **kwargs)

def table_targets(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    targetIds = domain.get("targetIds", [])
    if len(targetIds) == 0:
        with tag("span"):
            yield "Nog geen targets aangemaakt."
        return

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ["", "Naam", "Type"])
        with tag("tbody"):
            targets = [observable.call.getTarget(identifier=each, domainId=domainId) for each in targetIds]
            for target in sorted(targets, key=lambda x:x['name'].lower()):
                with tag("tr.clickable-row", **{'data-domainid': domainId, 'data-targetid': target.get('identifier')}):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{
                                'data-domainid': domainId,
                                'data-targetid': target.get('identifier')}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield target.get('name')
                    with tag("td"):
                        yield TARGET_TYPES.get(target.get('targetType'), "--")

def popup_target(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    targetId = arguments.get("identifier", [None])[0]
    target = observable.call.getTarget(identifier=targetId, domainId=domainId)
    domain = observable.call.getDomain(domainId)

    def targetType_sruUpdate(tag, target, domain):
        with tag("div.row.mt-3"):
            with tag("div.col"):
                yield page2.textInput(tag, label="Hostname", name="baseurl", value=target.get("baseurl", ""))
        with tag("div.row.mt-3"):
            with tag("div.col"):
                yield page2.textInput(tag, label="Port", name="port", value=target.get("port", ""))
        with tag("div.row.mt-3"):
            with tag("div.col"):
                yield page2.textInput(tag, label="Path", name="path", value=target.get("path", ""))

    def targetType_filesystem(tag, target, domain):
        with tag("div.row.mt-3"):
            with tag("div.col"):
                yield page2.textInput(tag, label="Path", name="path", value=target.get("path", ""))
        with tag("div.row.mt-3"):
            with tag("div.col"):
                yield page2.checkbox(tag,
                    label="OAI Envelope", name="oaiEnvelope",
                    checked=target.get("oaiEnvelope", False) is True)

    def targetType_composite(tag, target,  domain):
        otherTargets = [observable.call.getTarget(identifier=each, domainId=domain.get('identifier'))
            for each in domain.get('targetIds') if each != target.get('identifier')]

        with tag("div.row.mt-3"):
            with tag("div.col"):
                yield page2.selectList(tag,
                    name="delegateIds",
                    label="Targets (hold CTRL/CMD to select multiple targets",
                    items=[(each.get("identifier"), each.get("name")) for each in otherTargets],
                    selected=target.get("delegateIds", []),
                    height="6em")

    with tag("div", id_="placeholder_FrmUpdateTarget"):
        with tag("form.form", id_="FrmUpdateTarget"):
            with tag("input", type_="hidden", name="identifier", value=targetId): pass
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("input", type_="hidden", name="targetType", value=target.get("targetType")): pass
            with tag("div.row"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Naam", name="name", value=target.get("name", ""))
            with tag("div.row.mt-3"):
                with tag("div.col"):
                    yield page2.textLabel(tag, label="Type", value=TARGET_TYPES[target.get("targetType")])
            targetRenderer = dict(
                sruUpdate=targetType_sruUpdate,
                filesystem=targetType_filesystem,
                composite=targetType_composite).get(target.get("targetType"))
            yield targetRenderer(tag, target=target, domain=domain)

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-primary.float-end", id_="BtnUpdateTarget"):
                        yield "Opslaan"

def card_domainMappings(tag, domain, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmCreateMapping"):
        with tag("form.form", id_="FrmCreateMapping", **{'data-domainId': domainId, 'data-reset-on-submit': 'True'}):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Naam", name="name", value="")
                with tag("div.col-2.d-flex.flex-column.justify-content-end"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnCreateMapping"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_table_mappings"):
        yield table_mappings(tag, domain=domain, **kwargs)

def table_mappings(tag, domain=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    mappingIds = domain.get("mappingIds", [])
    if len(mappingIds) == 0:
        with tag("span"):
            yield "Nog geen mappings aangemaakt."
        return

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ["", "Naam"])
        with tag("tbody"):
            mappings = [observable.call.getMapping(identifier=each, domainId=domainId) for each in mappingIds]
            for mapping in sorted(mappings, key=lambda x:x['name'].lower()):
                with tag("tr.clickable-row", **{'data-domainid': domainId, 'data-mappingId': mapping.get('identifier')}):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", **{
                                'data-domainid': domainId,
                                'data-mappingid': mapping.get('identifier')}):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield mapping.get('name')

def popup_mapping(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    mappingId = arguments.get("identifier", [None])[0]
    mapping = observable.call.getMapping(identifier=mappingId, domainId=domainId)
    domain = observable.call.getDomain(domainId)

    with tag("div", id_="placeholder_FrmUpdateMapping"):
        with tag("form.form", id_="FrmUpdateMapping"):
            with tag("input", type_="hidden", name="identifier", value=mappingId): pass
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("div.row"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Naam", name="name", value=mapping.get("name", ""))
            with tag("div.row.mt-3"):
                with tag("div.col"):
                    yield page2.textarea(tag, label="Omschrijving", name="description",
                        value=mapping.get("description", ""),
                        height="5em")

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    yield page2.textarea(tag, label="Code", name="code",
                        value=mapping.get("code", ""), height="20em", wrap="off",
                        extraClasses=['font-monospace', 'fs-6'])

            with tag("div.row.mt-3"):
                with tag("div.col"):
                    with tag("button.btn.btn-primary.float-end", id_="BtnUpdateMapping"):
                        yield "Opslaan"
