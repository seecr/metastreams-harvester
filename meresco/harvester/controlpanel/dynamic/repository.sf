# -*- coding: utf-8 -*-
## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2019-2021 Seecr (Seek You Too B.V.) https://seecr.nl
# Copyright (C) 2019-2020 Stichting Kennisnet https://www.kennisnet.nl
# Copyright (C) 2020 SURF https://surf.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page, common

# req.req.headers_out['Cache-Control'] = 'no-cache'

# from meresco.harvester.timeslot import Timeslot

def main(**kwargs):
    user = kwargs.get('session', {}).get('user')
    domain = kwargs.get('session', {}).get('domain')
    domainId = kwargs.get('arguments', {}).get('domainId', [None])[0]
    if not user or (not user.isAdmin() and domain != domainId):
        yield http.redirect("/login")
        return
    yield page.layoutWithMenu(_contents, **kwargs)


def _contents(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    domain = observable.call.getDomain(domainId)
    repositoryId = arguments.get("identifier", [None])[0]
    repository = observable.call.getRepository(identifier=repositoryId, domainId=domainId)
    with tag("h1"):
        yield "Repository Administration"
    yield common.showErrorMessage(arguments)
    yield _repository(tag, domain, repository)

@tag_compose
def tablerow(tag, label):
    with tag('tr'):
        with tag('td'):
            yield label
        with tag('td'):
            yield
def textinput(tag, name, value):
    with tag('input', size='50', type_='text', name=name, value=value):
        return
        yield


def _repository(tag, domain, repository):
    domainId = domain.get('identifier')
    mappings = [(mappingId, observable.call.getMapping(mappingId).get('name', '')) for mappingId in domain.get('mappingIds', [])]
    targets = [(targetId, observable.call.getTarget(targetId).get('name', '')) for targetId in domain.get('targetIds', [])]

    yield """
    <div>
        <h3>Repository: {repositoryId}</h3>
        <form method="post" name="repositorySave" action="/actions/updateRepository">
            <input type="hidden" name="redirectUri" value="{repositoryEditLink}"/>
            <input type="hidden" name="identifier" value="{repositoryId}"/>
            <input type="hidden" name="domainId" value="{domainId}"/>
            <input type="hidden" name="repositoryGroupId" value="{repositoryGroupId}">
            <table class="edit" cellspacing="0" cellpadding="0">""".format(
        repositoryId=repository.get('identifier'),
        repositoryEditLink="/repository?{}".format(urlencode(dict(domainId=domainId))),
        domainId=domainId,
        repositoryGroupId=repository['repositoryGroupId'],
    )
    with tablerow(tag, 'Id:'):
        yield repository.get('identifier')
    with tablerow(tag, 'Baseurl:'):
        yield textinput(tag, "baseurl", repository.get('baseurl'))
    with tablerow(tag, 'Set:'):
        yield textinput(tag, "set", repository.get('set'))
    with tablerow(tag, 'Metadata Prefix:'):
        yield textinput(tag, "metadataPrefix", repository.get('metadataPrefix'))
    with tablerow(tag, 'User-Agent:'):
        yield textinput(tag, "userAgent", repository.get('userAgent'))
    with tablerow(tag, 'Authorization Key:'):
        yield textinput(tag, "authorizationKey", repository.get('authorizationKey'))
    yield "<tr><td>Mapping:</td><td>"
    yield common.dropdown(name="mappingId", options=[('', '')] + mappings, selected=repository.get('mappingId') or '')
    yield """
                    </td>
                </tr>
                <tr>
                    <td>Target:</td>
                    <td>"""
    yield common.dropdown(name="targetId", options=[('', '')] + targets, selected=repository.get('targetId') or '')
    yield """
                    </td>
                </tr>
                <tr>
                    <td>Target Collection:</td>
                    <td><input size="50" type="text" name="collection" value="{collection}"></td>
                </tr>
                <tr>
                    <td>Max. validation errors:</td>
                    <td><input size="50" type="text" name="maximumIgnore" value="{maximumIgnore}"></td>
                </tr>
                <tr>
                    <td>Harvest:</td>
                    <td><input type="checkbox" name="use" value="true" {harvestCheck}></td>
                </tr>
                <tr>
                    <td>Minimum continuous interval (in seconds):</td>
                    <td><input type="text" name="continuous" value="{continuous}"></td>
                </tr>
               <tr>
                    <td>Complete in one attempt:</td>
                    <td><input type="checkbox" name="complete" value="true" {oneAttemptCheck}>Tells the harvester to complete harvesting in one attempt. Generally this option should not be required. Only for repositories with shortlived resumptionTokens.</td>
                </tr>
                <tr>
                    <td>Next action:</td>
                    <td>""".format(
            collection=repository.get("collection") or '',
            maximumIgnore=repository.get('maximumIgnore') or '0',
            harvestCheck='checked' if repository.get('use') else '',
            continuous=repository.get('continuous', '') or '',
            oneAttemptCheck='checked' if repository.get('complete') else '')

    yield common.dropdown(
        name='repositoryAction',
        options=[('', '-'), ('clear', 'Clear'), ('refresh', 'Refresh')],
        selected=repository.get('action'))
    yield """
                    </td>
                </tr>"""
    if fieldDefinitions.get('repository_fields'):
        with tag('tr'):
            with tag('td', colspan="2"):
                with tag('hr'): pass
    for definition in fieldDefinitions.get('repository_fields', []):
        export = definition.get('export', False)
        with tag("tr"):
            with tag("td"):
                yield definition['label']
                yield ' '
                if not export:
                    with tag('sup', title="Hidden in export"):
                        yield '\u24d8' # â“˜
            with tag("td"):
                fieldName = 'extra_{}'.format(definition['name'])
                if definition['type'] == "text":
                    with tag("input", type_="text", name=fieldName, value=repository.get('extra', {}).get(definition['name'], '')): pass
                elif definition['type'] == "textarea":
                    with tag("textarea", name=fieldName, class_=['autosize']):
                        yield repository.get('extra', {}).get(definition['name'], '')
                else:
                    yield "File type '{}' not supported".format(definition['type'])

    yield """
            </table>
            <p><input type="submit" name="action" class="butt" value="Save" accesskey="s"></p>"""

    yield """
<div><h3>Closing hours</h3>
<table cellpadding="0" cellspacing="0">
    <tr>"""
    yield "\n".join("<th>{}</th>".format(header) for header in ['Week', 'Day', 'Begin', 'End', ''])
    yield """
    </tr>"""

    index = 0
    for index, shopclosed in enumerate(repository.get('shopclosed', []), start=1):
        closed = Timeslot(shopclosed)
        yield """<tr>"""
        yield renderTimeslot(index, closed)
        yield """</tr>"""
    yield """
    <input type="hidden" name="numberOfTimeslots" value="{index}">
    <tr>""".format(index=index)
    yield renderTimeslot(0, Timeslot('*:*:0:0-*:*:0:0'))
    yield """
        <td><input type="submit" class="butt" value="Add" accesskey="a" name="addTimeslot"></td>
    </tr>
</table>
</form>
</div>"""

    yield common.showStatusFor(domainId, "repository", repositoryId=repository.get("identifier"))
    yield """
<div>
    <h3>Useful links</h3>
    <ul>
        <li><a target="_blank" href="{listMetadataFormatsUrl}">List all metadata formats.</a></li>
        <li><a href="{testRepositoryLink}">Test mapping</a></li>
    </ul>
    <i>(You may need to save first.)</i>
</div>
<p><a href="{repositoryGroupEditLink}">Back to repositorygroup</a></p>""".format(
        listMetadataFormatsUrl="{}?{}".format(repository.get('baseurl'), urlencode(dict(verb="ListMetadataFormats"))),
        testRepositoryLink="/testrepository?{}".format(urlencode(
            dict(domainId=domainId, repositoryId=repository.get('identifier')))),
        repositoryGroupEditLink="/repositoryGroup?{}".format(urlencode(
            dict(domainId=domainId, identifier=repository.get('repositoryGroupId')))))


def _javascript():
    yield """
<script language="javascript">

function submitForm(submitName) {
    var submitButton = document.getElementById(submitName);
    submitButton.click()
}
</script>"""


def renderDropdown(index, selectName, options, selectedValue, wildcardName=''):
    yield common.dropdown(
        name='{}_{}'.format(selectName, index),
        options=[("*", wildcardName)] + options if wildcardName != '' else options,
        selected=selectedValue)


def renderTimeslot(index, timeslot):
    weeks = [(str(x), x) for x in range(1, 54)]
    hours = [(str(x), x) for x in range(25)]
    weekdays = list(enumerate(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']))

    yield '<td>'
    yield renderDropdown(index, 'shopclosedWeek', weeks, timeslot.beginweek, 'Any week')
    yield '</td><td>'
    yield renderDropdown(index, 'shopclosedWeekDay', weekdays, timeslot.beginday, 'Any day')
    yield '</td><td>from'
    yield renderDropdown(index, 'shopclosedBegin', hours, timeslot.beginhour)
    yield ':00 hrs</td><td>until'
    yield renderDropdown(index, 'shopclosedEnd', hours, timeslot.endhour)
    yield ':00 hrs</td>'
    if index != 0:
        yield '''
        <td align="right">
            <input type="image" src="/static/delete.jpg" name="{name}" id="{name}">
            <a href="javascript:submitForm('{name}')">delete</a>
        </td>'''.format(name="deleteTimeslot_{}".format(index))
        if not timeslot.valid():
            yield '<td><p class="error">Invalid timeslot specification, will be ignored.</p></td>'

