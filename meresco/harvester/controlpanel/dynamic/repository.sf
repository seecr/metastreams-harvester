# -*- coding: utf-8 -*-
## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2019-2021, 2024 Seecr (Seek You Too B.V.) https://seecr.nl
# Copyright (C) 2019-2020 Stichting Kennisnet https://www.kennisnet.nl
# Copyright (C) 2020 SURF https://surf.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import common
import page2
import status

WEEKDAYS = list(enumerate(["Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag"]))

# req.req.headers_out['Cache-Control'] = 'no-cache'

# from meresco.harvester.timeslot import Timeslot

def main(**kwargs):
    if not common.userAuthorized(**kwargs):
        yield http.redirect("/login")
        return

    sub = page2.findPath(
        "table", dict(
            closingHours=table_closinghours,
            headers=table_headers,
        ), **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return

    yield page2.render(
        _content,
        additionalScripts=[
            '/static/status.js',
            '/static/repository.js',
        ],
        **kwargs)

def _content(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    domain = observable.call.getDomain(domainId)
    repositoryId = arguments.get("identifier", [None])[0]
    repository = observable.call.getRepository(identifier=repositoryId, domainId=domainId)
    repositoryGroupId = repository.get("repositoryGroupId")

    yield page2.breadcrumbs(tag, [
        dict(label="Domeinen", href="/domains"),
        dict(label=domainId, href=page2.url("/domain", identifier=domainId)),
        dict(label=repositoryGroupId, href=page2.url("/repositoryGroup", identifier=repositoryGroupId, domainId=domainId)),
        dict(label=repositoryId, active=True)
    ])
    cardKwargs = dict(tag=tag, domain=domain, repository=repository, repositoryGroupId=repositoryGroupId)
    cardKwargs.update(kwargs)
    yield page2.card(f"Repository Gegevens - {repositoryId}", card_repositoryAttributes, **cardKwargs)

    yield page2.card("Uitvoering",
        card_repositoryActions,
        link=dict(
            func=btn_status,
            kwargs=dict(
                tag=tag,
                domainId=domainId,
                repositoryId=repository.get("identifier"))),
        **cardKwargs)

    fieldDefinition = observable.call.getFieldDefinition(domainId=domainId)
    if len(fieldDefinition) > 0 and 'repository_fields' in fieldDefinition:
        yield page2.card("Aanvullende gegevens",
            card_fieldDefinitions,
            fieldDefinition=fieldDefinition.get("repository_fields"),
            **cardKwargs)
    with tag("div.d-flex.flex-row.gap-2"):
        yield page2.card("Headers", card_headers, card_classes=['w-100'], **cardKwargs)
        yield page2.card("Tijden niet beschikbaar", card_closingHours, card_classes=['w-100'], **cardKwargs)
    yield page2.card("Links", card_usefull_links, **cardKwargs)

def btn_status(tag, domainId, repositoryId):
    with tag("div"):
        with tag("button.btn.seecr-btn.p-0.button-status", title="Status", **{
            'data-caption': f'Status repository {repositoryId}',
            'data-domainid': domainId,
            'data-repositoryid': repositoryId}):
            with tag("i.bi.bi-graph-up"):
                yield ''
            if status.totalErrors(domainId, None, repositoryId) > 0:
                with tag("span.position-absolute.top-1.end-1.translate-middle.p-1.bg-danger.border.border-light.rounded-circle"): pass

def card_repositoryAttributes(tag, domain, repository, repositoryGroupId, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmRepositoryAttributes"):
        with tag("form.form", id_="FrmRepositoryAttributes"):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("input", type_="hidden", name="identifier", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="repositoryGroupId", value=repositoryGroupId): pass

            with tag("div.row.mb-2"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Base URL", name="baseurl", value=repository.get("baseurl") or '')

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.textInput(tag, label="Set", name="set", value=repository.get("set") or '')
                with tag("div.col.pe-0"):
                    yield page2.textInput(tag, label="Metadata Prefix", name="metadataPrefix", value=repository.get("metadataPrefix") or '')
                with tag("div.col"):
                    yield page2.textInput(tag, label="Target Collection", name="collection", value=repository.get("collection") or '')

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.dropdown(tag,
                        label="Mapping",
                        name="mappingId",
                        items=[(mappingId, observable.call.getMapping(identifier=mappingId, domainId=domainId).get('name', ''))
                            for mappingId in domain.get('mappingIds', [])],
                        selected=repository.get("mappingId") or "")
                with tag("div.col"):
                    yield page2.dropdown(tag,
                        label="Target",
                        name="targetId",
                        items=[(targetId, observable.call.getTarget(identifier=targetId, domainId=domainId).get('name', ''))
                            for targetId in domain.get('targetIds', [])],
                        selected=repository.get("targetId") or "")

            with tag("div.row"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnRepositoryAttributes"):
                        yield "Aanpassen"

def card_repositoryActions(tag, domain, repository, repositoryGroupId, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmRepositoryActions"):
        with tag("form.form", id_="FrmRepositoryActions"):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("input", type_="hidden", name="identifier", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="repositoryGroupId", value=repositoryGroupId): pass

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.numberInput(tag, label="Maximale aantal validatie fouten",
                        minValue=60,
                        maxValue=7200,
                        name="maximumIgnore",
                        value=repository.get("maximumIgnore") or '')
                with tag("div.col.pe-0"):
                    yield page2.checkbox(tag,
                        label="Harvester aan", name="use",
                        checked=repository.get("use", False))
                with tag("div.col"):
                    yield page2.dropdown(tag,
                        label="Actie",
                        name="action",
                        items=[('', '-'), ('clear', 'Clear'), ('refresh', 'Refresh')],
                        selected=repository.get("action") or '')
            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.numberInput(tag, label="Interval",
                        minValue=60,
                        maxValue=7200,
                        name="continuous",
                        value=repository.get("continuous") or '')
                with tag("div.col"):
                    yield page2.checkbox(tag, label="Aansluitend harvesten",
                        name="complete",
                        checked=repository.get("complete", False),
                        helpText="Laat de harvester de repository in één keer harvesten door niet te wachten tussen OAI batches. Deze optie is met name voor repositories met resumptionToken van korte levensduur.")

            with tag("div.row"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnRepositoryActions"):
                        yield "Aanpassen"

def card_fieldDefinitions(tag, domain, repository, fieldDefinition, **kwargs):
    with tag("div", id_="placeholder_FrmFieldDefinition"):
        with tag("form.form", id_="FrmFieldDefinition"):
            with tag("input", type_="hidden", name="domainId", value=domain.get("identifier")): pass
            with tag("input", type_="hidden", name="identifier", value=repository.get("identifier")): pass

            for each in fieldDefinition:
                fieldName = "extra_{}".format(each['name'])
                fieldValue = repository.get("extra", {}).get(each['name'])
                with tag("div.row.mb-2"):
                    with tag("div.col.pe-0"):
                        if each['type'] == "text":
                            yield page2.textInput(tag,
                                label=each['label'], name=fieldName, value=fieldValue or '')
                        elif each['type'] == "bool":
                            yield page2.checkbox(tag, label=each['label'], name=fieldName,
                                checked=(fieldValue or False) is True)
                        elif each['type'] == "textarea":
                            yield page2.textarea(tag, label=each['label'], name=fieldName,
                                value=fieldValue or '', height="10em")
            with tag("div.row"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnFieldDefinition"):
                        yield "Aanpassen"

def card_headers(tag, domain, repository, **kwargs):
    with tag("div", id_="placeholder_headers_add"):
        with tag("form.form-inline", id_="FrmAddHeader", **{
                'data-domainid': domain.get('identifier'),
                'data-repositoryid': repository.get('identifier')}):
            with tag("input", type_="hidden", name="identifier", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="domainId", value=domain.get("identifier")): pass

            with tag("div.d-flex.flex-row.gap-2"):
                with tag("div.flex-fill"):
                    yield page2.textInput(tag, label="Naam", name="name", value='')
                with tag("div.flex-fill"):
                    yield page2.textInput(tag, label="Waarde", name="value", value='')
                with tag("div.d-flex.flex-column.flex-shrink-1.justify-content-end.ms-2"):
                    with tag("button.btn.btn-primary", id_="BtnAddHeader"):
                        yield "Toevoegen"

    with tag("div", id_="placeholder_headers_list"):
        yield table_headers(tag, domain=domain, repository=repository, **kwargs)

def table_headers(tag, domain=None, repository=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("domainId", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    if repository is None:
        repositoryId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        repository = observable.call.getRepository(repositoryId, domainId)
    else:
        repositoryId = repository.get("identifier")

    headers = repository.get("headers", {})
    if len(headers) == 0:
        with tag("p.mt-3"):
            yield "Nog geen headers aangemaakt."
        return

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ['', 'Naam', 'Waarde'])
        with tag("tbody"):
            for name in sorted(headers.keys()):
                value = headers[name]
                with tag("tr.clickable-row", **{}):
                    with tag("td.fit"):
                        with tag("form"):
                            with tag("input", type_="hidden", name="domainId", value=domain.get('identifier')): pass
                            with tag("input", type_="hidden", name="identifier", value=repository.get('identifier')): pass
                            with tag("input", type_="hidden", name="name", value=name): pass
                            with tag("button.seecr-btn.deletable", type_="button", title="Verwijderen"):
                                with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield name
                    with tag("td"):
                        yield value

def card_closingHours(tag, domain, repository, **kwargs):
    weeks = [(str(x), x) for x in range(1, 54)]

    with tag("div", id_="placeholder_FrmCreateClosingHours"):
        with tag("form.form-inline", id_="FrmCreateClosingHours", **{
                'data-domainid': domain.get('identifier'),
                'data-repositoryid': repository.get('identifier')}):
            with tag("input", type_="hidden", name="repositoryId", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="domainId", value=domain.get("identifier")): pass

            with tag("div.d-flex.flex-row"):
                with tag("div.flex-fill"):
                    yield page2.dropdown(tag,
                        label="Week",
                        items=[('*', "Alle weken")] + weeks,
                        name="week")
                with tag("div.flex-fill.ms-2"):
                    yield page2.dropdown(tag,
                        label="Dag",
                        items=[('*', "Alle dagen")] + WEEKDAYS,
                        name="day")
                with tag("div.flex-fill.ms-2"):
                    yield page2.numberInput(tag, label="Van (uur)", name="startHour", minValue="0", maxValue="24", value=0)
                with tag("div.flex-fill.ms-2"):
                    yield page2.numberInput(tag, label="Tot (uur)", name="endHour", minValue="0", maxValue="24", value=6)
                with tag("div.d-flex.flex-column.flex-shrink-1.justify-content-end.ms-2"):
                    with tag("button.btn.btn-primary", id_="BtnCreateClosingHours"):
                        yield "Toevoegen"

    with tag("div", id_="placeholder_table_closinghours"):
        yield table_closinghours(tag, domain=domain, repository=repository, **kwargs)

def table_closinghours(tag, domain=None, repository=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("domainId", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    if repository is None:
        repositoryId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        repository = observable.call.getRepository(repositoryId, domainId)
    else:
        repositoryId = repository.get("identifier")

    closingHours = repository.get("shopclosed", [])
    if len(closingHours) == 0:
        with tag("p.mt-3"):
            yield "Nog geen tijden opgegeven."
        return

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ['', 'Week', 'Dag', 'Van', 'Tot', ''])
        with tag("tbody"):
            for index, each in enumerate([Timeslot(each) for each in closingHours]):
                with tag("tr.clickable-row", **{}):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", title="Verwijderen", **{
                                'data-closinghour': str(index),
                                'data-domainid': domain.get('identifier'),
                                'data-repositoryid': repository.get('identifier'),
                                }):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield "Alle weken" if each.beginweek == "*" else each.beginweek
                    with tag("td"):
                        yield "Alle dagen" if each.beginday == "*" else dict(WEEKDAYS)[int(each.beginday)]
                    with tag("td"):
                        yield f"{each.beginhour}:00"
                    with tag("td"):
                        yield f"{each.endhour}:00"

def card_usefull_links(tag, domain, repository, **kwargs):
    with tag("div.d-flex.flex-row.gap-2"):
        with tag("a.btn.btn-light",
            href=page2.url("/get",
                verb="getRepository",
                domainId=domain.get("identifier"),
                identifier=repository.get("identifier")),
            target="_blank"):
            with tag("i.bi.bi bi-box-arrow-up-right.pe-2"): pass
            yield "Sahara Get"

        with tag("a.btn.btn-light",
            href=page2.url("/testrepository",
                domainId=domain.get("identifier"),
                repositoryId=repository.get("identifier")),
            target="_blank"):
            with tag("i.bi.bi bi-box-arrow-up-right.pe-2"): pass
            yield "Test Mapping"

        with tag("a.btn.btn-light",
            href=page2.url(repository.get("baseurl"),
                verb="ListMetadataFormats"),
            target="_blank"):
            with tag("i.bi.bi bi-box-arrow-up-right.pe-2"): pass
            yield "List all metadata formats"
