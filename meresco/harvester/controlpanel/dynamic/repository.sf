# -*- coding: utf-8 -*-
## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2019-2021 Seecr (Seek You Too B.V.) https://seecr.nl
# Copyright (C) 2019-2020 Stichting Kennisnet https://www.kennisnet.nl
# Copyright (C) 2020 SURF https://surf.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page, common
import page2

WEEKDAYS = list(enumerate(["Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag", "Zondag"]))

# req.req.headers_out['Cache-Control'] = 'no-cache'

# from meresco.harvester.timeslot import Timeslot

def main(**kwargs):
    if not common.userAuthorized(**kwargs):
        yield http.redirect("/login")
        return

    sub = page2.findPath(
        "table", dict(
            closingHours=table_closinghours,
        ), **kwargs)
    if not sub is None:
        yield sub(**kwargs)
        return

    yield page2.render(
        _content,
        additionalScripts=[
            '/static/repository.js',
        ],
        **kwargs)

def _content(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    domain = observable.call.getDomain(domainId)
    repositoryId = arguments.get("identifier", [None])[0]
    repository = observable.call.getRepository(identifier=repositoryId, domainId=domainId)
    repositoryGroupId = repository.get("repositoryGroupId")

    yield page2.breadcrumbs(tag, [
        dict(label="Domeinen", href="/domains"),
        dict(label=domainId, href=page2.url("/domain", identifier=domainId)),
        dict(label=repositoryGroupId, href=page2.url("/repositoryGroup", identifier=repositoryGroupId, domainId=domainId)),
        dict(label=repositoryId, active=True)
    ])
    cardKwargs = dict(tag=tag, domain=domain, repository=repository, repositoryGroupId=repositoryGroupId)
    cardKwargs.update(kwargs)
    yield page2.card(f"Repository Gegevens - {repositoryId}", card_repositoryAttributes, **cardKwargs)
    yield page2.card("Uitvoering", card_repositoryActions, **cardKwargs)
    fieldDefinition = observable.call.getFieldDefinition(domainId=domainId)
    # yield str(fieldDefinition)
    #yield page2.card("Field Definitions", card_fieldDefinitions, **cardKwargs)
    yield page2.card("Closing Hours", card_closingHours, **cardKwargs)


def card_repositoryAttributes(tag, domain, repository, repositoryGroupId, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmRepositoryAttributes"):
        with tag("form.form", id_="FrmRepositoryAttributes"):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("input", type_="hidden", name="identifier", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="repositoryGroupId", value=repositoryGroupId): pass

            with tag("div.row.mb-2"):
                with tag("div.col"):
                    yield page2.textInput(tag, label="Base URL", name="baseurl", value=repository.get("baseurl") or '')

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.textInput(tag, label="Set", name="set", value=repository.get("set") or '')
                with tag("div.col.pe-0"):
                    yield page2.textInput(tag, label="Metadata Prefix", name="metadataPrefix", value=repository.get("metadataPrefix") or '')
                with tag("div.col"):
                    yield page2.textInput(tag, label="Target Collection", name="collection", value=repository.get("collection"))

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.textInput(tag, label="User-Agent", name="userAgent", value=repository.get("userAgent") or '')
                with tag("div.col"):
                    yield page2.textInput(tag, label="Authorization Key", name="authorizationKey", value=repository.get("authorizationKey") or '')

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.dropdown(tag,
                        label="Mapping",
                        name="mappingId",
                        items=[(mappingId, observable.call.getMapping(identifier=mappingId, domainId=domainId).get('name', ''))
                            for mappingId in domain.get('mappingIds', [])],
                        selected=repository.get("mappingId") or "")
                with tag("div.col"):
                    yield page2.dropdown(tag,
                        label="Target",
                        name="targetId",
                        items=[(targetId, observable.call.getTarget(identifier=targetId, domainId=domainId).get('name', ''))
                            for targetId in domain.get('targetIds', [])],
                        selected=repository.get("targetId") or "")

            with tag("div.row"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnRepositoryAttributes"):
                        yield "Aanpassen"

def card_repositoryActions(tag, domain, repository, repositoryGroupId, **kwargs):
    domainId = domain.get("identifier")
    with tag("div", id_="placeholder_FrmRepositoryActions"):
        with tag("form.form", id_="FrmRepositoryActions"):
            with tag("input", type_="hidden", name="domainId", value=domainId): pass
            with tag("input", type_="hidden", name="identifier", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="repositoryGroupId", value=repositoryGroupId): pass

            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.numberInput(tag, label="Maximale aantal validatie fouten",
                        minValue=60,
                        maxValue=7200,
                        name="maximumIgnore",
                        value=repository.get("maximumIgnore") or '')
                with tag("div.col.pe-0"):
                    yield page2.checkbox(tag,
                        label="Harvester aan", name="use",
                        checked=repository.get("use", False))
                with tag("div.col"):
                    yield page2.dropdown(tag,
                        label="Actie",
                        name="repositoryAction",
                        items=[('', '-'), ('clear', 'Clear'), ('refresh', 'Refresh')],
                        selected=repository.get("repositoryAction") or '')
            with tag("div.row.mb-2"):
                with tag("div.col.pe-0"):
                    yield page2.numberInput(tag, label="Interval",
                        minValue=60,
                        maxValue=7200,
                        name="continuous",
                        value=repository.get("continuous") or 1200)
                with tag("div.col"):
                    yield page2.checkbox(tag, label="Aansluitend harvesten",
                        name="complete",
                        checked=repository.get("complete", False),
                        helpText="Laat de harvester de repository in één keer harvesten door niet te wachten tussen OAI batches. Deze optie is met name voor repositories met resumptionToken van korte levensduur.")

            with tag("div.row"):
                with tag("div.col"):
                    with tag("button.btn.btn-small.btn-primary.float-end", type_="submit", id_="BtnRepositoryActions"):
                        yield "Aanpassen"

def card_fieldDefinitions(tag, domain, repository, **kwargs):
    yield "fieldDefinitions"


def card_closingHours(tag, domain, repository, **kwargs):
    weeks = [(str(x), x) for x in range(1, 54)]

    with tag("div", id_="placeholder_FrmCreateClosingHours"):
        with tag("form.form-inline", id_="FrmCreateClosingHours", **{
                'data-domainid': domain.get('identifier'),
                'data-repositoryid': repository.get('identifier')}):
            with tag("input", type_="hidden", name="repositoryId", value=repository.get("identifier")): pass
            with tag("input", type_="hidden", name="domainId", value=domain.get("identifier")): pass

            with tag("div.d-flex.flex-row"):
                with tag("div.flex-fill"):
                    yield page2.dropdown(tag,
                        label="Week",
                        items=[('*', "Alle weken")] + weeks,
                        name="week")
                with tag("div.flex-fill.ms-2"):
                    yield page2.dropdown(tag,
                        label="Dag",
                        items=[('*', "Alle dagen")] + WEEKDAYS,
                        name="day")
                with tag("div.flex-fill.ms-2"):
                    yield page2.numberInput(tag, label="Van (uur)", name="startHour", minValue="0", maxValue="24", value=0)
                with tag("div.flex-fill.ms-2"):
                    yield page2.numberInput(tag, label="Tot (uur)", name="endHour", minValue="0", maxValue="24", value=6)
                with tag("div.d-flex.flex-column.flex-shrink-1.justify-content-end.ms-2"):
                    with tag("button.btn.btn-primary", id_="BtnCreateClosingHours"):
                        yield "Toevoegen"

    with tag("div", id_="placeholder_table_closinghours"):
        yield table_closinghours(tag, domain=domain, repository=repository, **kwargs)

def table_closinghours(tag, domain=None, repository=None, **kwargs):
    if domain is None:
        domainId = kwargs.get("arguments", {}).get("domainId", [None])[0]
        domain = observable.call.getDomain(domainId)
    else:
        domainId = domain.get("identifier")

    if repository is None:
        repositoryId = kwargs.get("arguments", {}).get("identifier", [None])[0]
        repository = observable.call.getRepository(repositoryId, domainId)
    else:
        repositoryId = repository.get("identifier")

    closingHours = repository.get("shopclosed", [])
    if len(closingHours) == 0:
        with tag("p.mt-3"):
            yield "Nog geen tijden opgegeven."
        return

    with tag("table.table.table-sm.table-hover"):
        yield page2.thead(tag, ['', 'Week', 'Dag', 'Van', 'Tot', ''])
        with tag("tbody"):
            for index, each in enumerate([Timeslot(each) for each in closingHours]):
                with tag("tr.clickable-row", **{}):
                    with tag("td.fit"):
                        with tag("button.seecr-btn.deletable", title="Verwijderen", **{
                                'data-closinghour': str(index),
                                'data-domainid': domain.get('identifier'),
                                'data-repositoryid': repository.get('identifier'),
                                }):
                            with tag("i.bi-trash"): pass
                    with tag("td"):
                        yield "Alle weken" if each.beginweek == "*" else each.beginweek
                    with tag("td"):
                        yield "Alle dagen" if each.beginday == "*" else dict(WEEKDAYS)[int(each.beginday)]
                    with tag("td"):
                        yield f"{each.beginhour}:00"
                    with tag("td"):
                        yield f"{each.endhour}:00"

def _contents(tag, arguments, **kwargs):
    domainId = arguments.get("domainId", [None])[0]
    domain = observable.call.getDomain(domainId)
    repositoryId = arguments.get("identifier", [None])[0]
    repository = observable.call.getRepository(identifier=repositoryId, domainId=domainId)
    with tag("h1"):
        yield "Repository Administration"
    yield common.showErrorMessage(arguments)
    yield _repository(tag, domain, repository)

@tag_compose
def tablerow(tag, label):
    with tag('tr'):
        with tag('td'):
            yield label
        with tag('td'):
            yield
def textinput(tag, name, value):
    with tag('input', size='50', type_='text', name=name, value=value):
        return
        yield


def _repository(tag, domain, repository):
    domainId = domain.get('identifier')
    mappings = [(mappingId, observable.call.getMapping(identifier=mappingId, domainId=domainId).get('name', '')) for mappingId in domain.get('mappingIds', [])]
    targets = [(targetId, observable.call.getTarget(identifier=targetId, domainId=domainId).get('name', '')) for targetId in domain.get('targetIds', [])]

    yield """
    <div>
        <h3>Repository: {repositoryId}</h3>
        <form method="post" name="repositorySave" action="/actions/updateRepository">
            <input type="hidden" name="redirectUri" value="{repositoryEditLink}"/>
            <input type="hidden" name="identifier" value="{repositoryId}"/>
            <input type="hidden" name="domainId" value="{domainId}"/>
            <input type="hidden" name="repositoryGroupId" value="{repositoryGroupId}">
            <table class="edit" cellspacing="0" cellpadding="0">""".format(
        repositoryId=repository.get('identifier'),
        repositoryEditLink="/repository?{}".format(urlencode(dict(domainId=domainId))),
        domainId=domainId,
        repositoryGroupId=repository['repositoryGroupId'],
    )
    with tablerow(tag, 'Id:'):
        yield repository.get('identifier')
    with tablerow(tag, 'Baseurl:'):
        yield textinput(tag, "baseurl", repository.get('baseurl') or '')
    with tablerow(tag, 'Set:'):
        yield textinput(tag, "set", repository.get('set') or '')
    with tablerow(tag, 'Metadata Prefix:'):
        yield textinput(tag, "metadataPrefix", repository.get('metadataPrefix') or '')
    with tablerow(tag, 'User-Agent:'):
        yield textinput(tag, "userAgent", repository.get('userAgent') or '')
    with tablerow(tag, 'Authorization Key:'):
        yield textinput(tag, "authorizationKey", repository.get('authorizationKey') or '')
    yield "<tr><td>Mapping:</td><td>"
    yield common.dropdown(name="mappingId", options=[('', '')] + mappings, selected=repository.get('mappingId') or '')
    yield """
                    </td>
                </tr>
                <tr>
                    <td>Target:</td>
                    <td>"""
    yield common.dropdown(name="targetId", options=[('', '')] + targets, selected=repository.get('targetId') or '')
    yield """
                    </td>
                </tr>
                <tr>
                    <td>Target Collection:</td>
                    <td><input size="50" type="text" name="collection" value="{collection}"></td>
                </tr>
                <tr>
                    <td>Max. validation errors:</td>
                    <td><input size="50" type="text" name="maximumIgnore" value="{maximumIgnore}"></td>
                </tr>
                <tr>
                    <td>Harvest:</td>
                    <td><input type="checkbox" name="use" value="true" {harvestCheck}></td>
                </tr>
                <tr>
                    <td>Minimum continuous interval (in seconds):</td>
                    <td><input type="text" name="continuous" value="{continuous}"></td>
                </tr>
               <tr>
                    <td>Complete in one attempt:</td>
                    <td><input type="checkbox" name="complete" value="true" {oneAttemptCheck}>Tells the harvester to complete harvesting in one attempt. Generally this option should not be required. Only for repositories with shortlived resumptionTokens.</td>
                </tr>
                <tr>
                    <td>Next action:</td>
                    <td>""".format(
            collection=repository.get("collection") or '',
            maximumIgnore=repository.get('maximumIgnore') or '0',
            harvestCheck='checked' if repository.get('use') else '',
            continuous=repository.get('continuous', '') or '',
            oneAttemptCheck='checked' if repository.get('complete') else '')

    yield common.dropdown(
        name='repositoryAction',
        options=[('', '-'), ('clear', 'Clear'), ('refresh', 'Refresh')],
        selected=repository.get('action'))
    yield """
                    </td>
                </tr>"""
    fieldDefinition = observable.call.getFieldDefinition(domainId=domainId)
    if fieldDefinition.get('repository_fields'):
        with tag('tr'):
            with tag('td', colspan="2"):
                with tag('hr'): pass
    for definition in fieldDefinition.get('repository_fields', []):
        export = definition.get('export', False)
        with tag("tr"):
            with tag("td"):
                yield definition['label']
                yield ' '
                if not export:
                    with tag('sup', title="Hidden in export"):
                        yield '\u24d8' # ⓘ
            with tag("td"):
                fieldName = 'extra_{}'.format(definition['name'])
                fieldValue =  repository.get('extra', {}).get(definition['name'], definition.get("default", ""))
                if definition['type'] == "text":
                    with tag("input", type_="text", name=fieldName, value=fieldValue): pass
                elif definition['type'] == "textarea":
                    with tag("textarea", name=fieldName, class_=['autosize']):
                        yield fieldValue
                elif definition['type'] == "bool":
                    with tag("input", name=fieldName, type_="checkbox", value="on", checked='CHECKED' if fieldValue is True else ''):
                        pass
                else:
                    yield "File type '{}' not supported".format(definition['type'])

    yield """
            </table>
            <p><input type="submit" name="action" class="butt" value="Save" accesskey="s"></p>"""

    yield """
<div><h3>Closing hours</h3>
<table cellpadding="0" cellspacing="0">
    <tr>"""
    yield "\n".join("<th>{}</th>".format(header) for header in ['Week', 'Day', 'Begin', 'End', ''])
    yield """
    </tr>"""

    index = 0
    for index, shopclosed in enumerate(repository.get('shopclosed', []), start=1):
        closed = Timeslot(shopclosed)
        yield """<tr>"""
        yield renderTimeslot(index, closed)
        yield """</tr>"""
    yield """
    <input type="hidden" name="numberOfTimeslots" value="{index}">
    <tr>""".format(index=index)
    yield renderTimeslot(0, Timeslot('*:*:0:0-*:*:0:0'))
    yield """
        <td><input type="submit" class="butt" value="Add" accesskey="a" name="addTimeslot"></td>
    </tr>
</table>
</form>
</div>"""

    yield common.showStatusFor(domainId, "repository", repositoryId=repository.get("identifier"))
    yield """
<div>
    <h3>Useful links</h3>
    <ul>
        <li><a target="_blank" href="{listMetadataFormatsUrl}">List all metadata formats.</a></li>
        <li><a href="{testRepositoryLink}">Test mapping</a></li>
    </ul>
    <i>(You may need to save first.)</i>
</div>
<p><a href="{repositoryGroupEditLink}">Back to repositorygroup</a></p>""".format(
        listMetadataFormatsUrl="{}?{}".format(repository.get('baseurl'), urlencode(dict(verb="ListMetadataFormats"))),
        testRepositoryLink="/testrepository?{}".format(urlencode(
            dict(domainId=domainId, repositoryId=repository.get('identifier')))),
        repositoryGroupEditLink="/repositoryGroup?{}".format(urlencode(
            dict(domainId=domainId, identifier=repository.get('repositoryGroupId')))))


def _javascript():
    yield """
<script language="javascript">

function submitForm(submitName) {
    var submitButton = document.getElementById(submitName);
    submitButton.click()
}
</script>"""


def renderDropdown(index, selectName, options, selectedValue, wildcardName=''):
    yield common.dropdown(
        name='{}_{}'.format(selectName, index),
        options=[("*", wildcardName)] + options if wildcardName != '' else options,
        selected=selectedValue)


def renderTimeslot(index, timeslot):
    weeks = [(str(x), x) for x in range(1, 54)]
    hours = [(str(x), x) for x in range(25)]

    yield '<td>'
    yield renderDropdown(index, 'shopclosedWeek', weeks, timeslot.beginweek, 'Any week')
    yield '</td><td>'
    yield renderDropdown(index, 'shopclosedWeekDay', WEEKDAYS, timeslot.beginday, 'Any day')
    yield '</td><td>from'
    yield renderDropdown(index, 'shopclosedBegin', hours, timeslot.beginhour)
    yield ':00 hrs</td><td>until'
    yield renderDropdown(index, 'shopclosedEnd', hours, timeslot.endhour)
    yield ':00 hrs</td>'
    if index != 0:
        yield '''
        <td align="right">
            <input type="image" src="/static/delete.jpg" name="{name}" id="{name}">
            <a href="javascript:submitForm('{name}')">delete</a>
        </td>'''.format(name="deleteTimeslot_{}".format(index))
        if not timeslot.valid():
            yield '<td><p class="error">Invalid timeslot specification, will be ignored.</p></td>'

