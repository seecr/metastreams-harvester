## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def main(arguments, **kwargs):
    inputurl = arguments.get('inputurl', [None])[0]

    mappingId = arguments.get('mappingId', [None])[0]
    domainId = arguments.get('domainId', [None])[0]

    repository = observable.call.getRepository(
        identifier=arguments.get('repositoryId', [None])[0],
        domainId=domainId)
    
    mapping = observable.call.getMapping(identifier=mappingId, domainId=domainId)

    yield okPlainText
    strm = StringIO()
    onlineHarvest = OnlineHarvest(strm)
    try:
        onlineHarvest.performMapping(mapping, urlString=inputurl, headers=repository.get('headers', {}))
    except Exception as e:
        yield """There was an exception testing the mapping.

{}""".format(str(e))
        return

    def split(data, size):
        return data[:size], data[size:]

    yield """Gebruikte url:
{}

Gebruikte Mapping:
""".format(inputurl)
    result = strm.getvalue()
    while len(result) > 0:
        part, result = split(result, 1024)
        yield part
