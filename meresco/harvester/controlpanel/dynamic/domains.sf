## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page2

def main(**kwargs):
    user = kwargs.get('user', None)
    if not user: # or not user.isAdmin():
        yield http.redirect('/')
        return

    table = page2.findPath("table", dict(
        domains=table_domains,
        domain_aliases=table_domain_aliases), **kwargs)
    if not table is None:
        yield table(**kwargs)
        return

    yield page2.render(
        _contents,
        additionalScripts=['/static/domains.js'],
        **kwargs)

def _contents(tag, arguments, **kwargs):
    yield page2.breadcrumbs(tag, [
        dict(label="Domeinen", active=True),
    ])
    #with tag("div.container"):
    yield page2.card("Domeinen", cardDomains, icon="collection", tag=tag, **kwargs)
    
    user = kwargs.get("user", None)
    if user and user.isAdmin():
        yield page2.card("Aliases", card_domain_aliases, icon="collection", tag=tag, **kwargs)

def card_domain_aliases(tag, user, **kwargs):
    aliases = observable.call.get_domain_aliases()
    allDomainIds = user.listDomainIds()

    available_domainIds = [each for each in allDomainIds if each not in aliases.values()]
    with tag("div.d-flex.flex-column.gap-2"):
        with tag("form.form.d-flex.flex-row.gap-2", id_="frm_add_domain_alias"):
            yield page2.textInput(tag, label="Alias", name="alias", value="")
            yield page2.dropdown(tag, label="Identifier", name="domainId", items=[(each, each) for each in available_domainIds])

            with tag("button.btn.btn-primary", type_="button", id_="btn_add_domain_alias"):
                yield "Aanmaken"
        with tag("div", id_="placeholder_domain_aliases"):
            yield table_domain_aliases(tag, **kwargs)

def table_domain_aliases(tag, **kwargs):
    aliases = observable.call.get_domain_aliases()
    if len(aliases) == 0:
        yield "Geen aliases gedefineerd."
    else:
        with tag("table.table"):
            with tag("thead"):
                with tag("tr"):
                    for each in ['', 'Alias', 'Domein']:
                        with tag("th"): yield each
            with tag("tbody"):
                for alias in aliases:
                    with tag("tr"):
                        with tag("td.fit"):
                            with tag("form.form"):
                                with tag("input", type_="hidden", name="alias", value=alias): pass
                                with tag("button.seecr-btn.deletable", type_="button", title="Verwijderen"):
                                    with tag("i.bi.bi-x-square"): pass
                        with tag("td"):
                            yield alias
                        with tag("td"):
                            yield aliases[alias]


def cardDomains(tag, **kwargs):
    user = kwargs.get("user", None)
    if user and user.isAdmin():
        with tag("div", id_="placeholder_FrmCreateDomain"):
            with tag("form.form", id_="FrmCreateDomain", **{'data-reset-on-submit': 'True'}):
                with tag("div.d-flex.flex-row"):
                    with tag("div.flex-fill.me-2"):
                        yield page2.textInput(tag, label="Identifier", name="identifier", value="")
                    with tag("div.d-flex.flex-column.flex-shrink-1.justify-content-end"):
                        with tag("button.btn.btn-small.btn-primary", type_="submit", id_="BtnCreateDomain"):
                            yield "Aanmaken"

    with tag("div", id_="placeholder_domains"):
        yield table_domains(tag, **kwargs)

def table_domains(tag, user, **kwargs):
    allDomainIds = user.listDomainIds(); #observable.call.getDomainIds()
    with tag("table.table.table-sm.table-hover", id_="TblDomains"):
        with tag("thead"):
            for label in ['','Naam', "Omschrijving"]:
                with tag("th"): yield label
        with tag("tbody"):
            for each in sorted(allDomainIds, key=lambda each: each.lower()):
                with tag("tr", **{'data-id': each}):
                    with tag("td.fit"):
                        # later; popup perhaps with domain fields to edit?
                        #with tag("button.seecr-btn"):
                        #    with tag("i.bi-pencil"): pass
                        pass
                    with tag("td.fit"):
                        with tag("a", href=page2.url("/domain", identifier=each)):
                            yield each
                    with tag("td"):
                        domainInfo = observable.call.getDomain(each)
                        yield domainInfo.get("description", "")
