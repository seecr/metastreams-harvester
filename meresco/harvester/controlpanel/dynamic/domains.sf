## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

import page2

def main(**kwargs):
    user = kwargs.get('user', None)
    if not user: # or not user.isAdmin():
        yield http.redirect('/')
        return

    table = page2.findPath("table", dict(domains=table_domains), **kwargs)
    if not table is None:
        yield table(**kwargs)
        return

    yield page2.render(
        _contents,
        additionalScripts=['/static/domains.js'],
        **kwargs)

def _contents(tag, arguments, **kwargs):
    yield page2.breadcrumbs(tag, [
        dict(label="Domeinen", active=True),
    ])
    #with tag("div.container"):
    yield page2.card("Domeinen", cardDomains, icon="collection", tag=tag, **kwargs)

def cardDomains(tag, **kwargs):
    user = kwargs.get("user", None)
    if user and user.isAdmin():
        with tag("form.form", id_="FrmCreateDomain"):
            with tag("div.d-flex.flex-row"):
                with tag("div.flex-fill.me-2"):
                    yield page2.textInput(tag, label="Naam", name="identifier", value="")
                with tag("div.d-flex.flex-column.flex-shrink-1.justify-content-end"):
                    with tag("button.btn.btn-small.btn-primary", type_="submit", id_="BtnCreateDomain"):
                        yield "Aanmaken"

    with tag("div", id_="placeholder_domains"):
        yield table_domains(tag, **kwargs)

def table_domains(tag, user, **kwargs):
    allDomainIds = user.listDomainIds(); #observable.call.getDomainIds()
    with tag("table.table.table-sm.table-hover", id_="TblDomains"):
        with tag("thead"):
            for label in ['','Naam', "Omschrijving"]:
                with tag("th"): yield label
        with tag("tbody"):
            for each in sorted(allDomainIds, key=lambda each: each.lower()):
                with tag("tr", **{'data-id': each}):
                    with tag("td.fit"):
                        # later; popup perhaps with domain fields to edit?
                        #with tag("button.seecr-btn"):
                        #    with tag("i.bi-pencil"): pass
                        pass
                    with tag("td.fit"):
                        with tag("a", href=page2.url("/domain", identifier=each)):
                            yield each
                    with tag("td"):
                        domainInfo = observable.call.getDomain(each)
                        yield domainInfo.get("description", "")


# ------- Old stuff below


import page
import common

def old_main(**kwargs):
    user = kwargs.get('session', {}).get('user')
    if not user or not user.isAdmin():
        yield http.redirect("/login")
        return
    yield page.layoutWithMenu(old_contents, **kwargs)


def old_contents(arguments, session, **kwargs):
    yield """<h1>Domains Administration</h1>"""
    error = arguments.get("error", [None])[0]
    if error:
        yield '<span class="error">{}</span>'.format(error)

    yield _domainAdministration()
    # yield "<br/>"
    # yield _userAdministration(session)


def _domainAdministration():

    yield """
  <div><h3>Domains</h3>
  <form action='/actions/addDomain' method='post'>
    <input type="hidden" name="redirectUri" value="/domain"/>
    <table width="320" border="0" cellspacing="0" cellpadding="0">
     <tr>
      <td width="60">Name:&nbsp;</td>
      <td width="200"><input name="identifier" type="text" class="zkveld" value=""></td>
      <td width="40"><input name="submit" type="submit" class="butt" value="Create"></td>
     </tr>
    </table>
  </form>
  </div>

  <div>
   <table border="0" cellspacing="0" cellpadding="0" width="50%">"""

    domainIds = observable.call.getDomainIds()
    for identifier in domainIds:
        yield """
    <tr class="table_row">
     <td>{identifier}</td>
     <td>
      <a href="/domain?{args}">
       Edit / View
      </a>
     </td>
    </tr>""".format(identifier=identifier, args=urlencode(dict(identifier=identifier)))

    yield """
   </table>
  </div>"""


def _userAdministration(session):
    yield """
<h1>Users Administration</h1>
<div>
    <table width="100%" border="0" cellspacing="4" cellpadding="0">"""
    for user in observable.call.listUsers():
        yield """
        <tr>
            <td>
                <h3>{user_fullname}</h3>
                <table width="100%" cellspacing="0" cellpadding="0">
                    <tr>
                        <td width="15%"><b>Full name:</b></td>
                        <td width="35%"><b>{user_fullname}</b></td>
                        <td width="15%">Organization:</td>
                        <td width="35%">{organization}</td>
                    </tr>
                    <tr>
                        <td><b>Username:</b></td>
                        <td><b>{user_localname}</b></td>
                        <td>Telephone:</td>
                        <td>{telephone}</td>
                    </tr>
                    <tr>
                        <td><b>Domain:</b></td>
                        <td><b>{domain}</b></td>
                        <td>E-mail:</td>
                        <td>{email}</td>
                    </tr>
                    <tr>
                        <td valign="top">Notes:</td>
                        <td colspan="3" ><pre>{notes}</pre></td>
                    </tr>
                </table>
                <p>
                    <a href="{userEditLink}">Edit / View</a>
&nbsp;
                    <form method='post' action='/user.action/delete' name="{deleteFormName}">
                        <input type="hidden" name="redirectUri" value="/domains"/>
                        <input type="hidden" name="username" value="{user_localname_raw}"/>
                        <a onclick="if(confirm('Weet u het zeker?')) {{ document.{deleteFormName}.submit(); }}; return false;">Delete</a>
                    </form>
                </p>""".format(
            user_fullname=escapeHtml(user.name),
            organization=escapeHtml(user.organization),
            user_localname=escapeHtml(user.username),
            user_localname_raw=user.username,
            telephone=escapeHtml(user.telephone),
            domain=escapeHtml(user.domain),
            email=escapeHtml(user.email),
            notes=escapeHtml(user.notes),
            userEditLink="/user?{}".format(urlencode(dict(identifier=user.username))),
            deleteFormName="deleteUser_{}".format(user.username))
    yield """
    </table>
    <div>
        <a name="newUser"></a>
        <h3>Create new user</h3>"""
    yield common.showSessionError(session, "newUser")
    yield """
        <form action='/user.action/create' method='post'>
            <input type="hidden" name="redirectUri" value="/user"/>
            <input type="hidden" name="errorUri" value="/domains#newUser"/>
            <table width="100%" border="0" cellspacing="0" cellpadding="0">
                <tr>
                  <td width="60">Username:&nbsp;</td>
                  <td width="200"><input name="username" type="text" class="zkveld" value="{username}"></td>
                </tr>
                <tr>
                    <td width="60">Domain:&nbsp;</td>
                    <td width="200">""".format(
        username=common.valueFromSession(session, 'username'))
    yield common.dropdown("domain", [(each, each) for each in observable.call.getDomainIds()], selected=common.valueFromSession(session, 'domain'))

    yield """
                    </td>
                </tr>
                <tr>
                    <td width="60">Password:</td>
                    <td width="200"><input name="password1" type="password" class="zkveld" value=""></td>
                </tr>
                <tr>
                    <td width="60">Password(repeat):</td>
                    <td width="200"><input name="password2" type="password" class="zkveld" value=""></td>
                </tr>
                <tr>
                    <td></td>
                    <td><input name="submit" type="submit" class="butt" value="Create"></td>
                </tr>
            </table>
        </form>
  </div>"""
