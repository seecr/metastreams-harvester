## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2012, 2015, 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
# Copyright (C) 2012, 2015 Stichting Kennisnet http://www.kennisnet.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def toZuluTime(timestamp):
    timestamp = timestamp.replace(' ', 'T')
    if not timestamp.endswith('Z'):
        timestamp = timestamp + 'Z'
    return timestamp

def main(path, arguments, **kwargs):
    pathArgs = path.split("/")[2:]
    if pathArgs == []:
        domainId = arguments.get('domainId', [None])[0]
    else:
        domainId = pathArgs[0]
    aliases = observable.call.get_domain_aliases()

    linkToStatusPage = f"{externalUrl}/showHarvesterStatus/{domainId}"
    domainId = aliases.get(domainId, domainId)

    yield "HTTP/1.0 200 OK\r\n"
    yield "Content-Type: application/rss+xml\r\n"
    yield "\r\n"
    yield '<?xml version="1.0" encoding="UTF-8"?>\r\n'
    yield """<rss version="2.0"><channel>"""
    yield "<title>Harvest status changes for domain '%s'</title>" % domainId
    yield "<description>Status changes per repository for domain '%s'</description>" % domainId
    yield '<link>%s</link>' % escapeXml(linkToStatusPage)
    yield '<ttl>360</ttl>'

    for runningState in observable.call.getRunningStatesForDomain(domainId):
        runningState['changedate'] = toZuluTime(runningState['changedate'])
        description = 'Harvest time: ' + runningState['changedate']
        if runningState.get('message', ''):
            description += '<br/>' + runningState['message']
        yield RSS_TEMPLATE % {
            'title': '%(repositoryId)s: %(status)s' % runningState,
            'description': escapeXml(description),
            'link': escapeXml('/'.join([linkToStatusPage, runningState['repositoryGroupId'], runningState['repositoryId']])),
            'guid': '%(repositoryId)s:%(changedate)s' % runningState,
        }

    yield "</channel>"
    yield "</rss>"

RSS_TEMPLATE = """<item>
    <title>%(title)s</title>
    <description>%(description)s</description>
    <link>%(link)s</link>
    <guid>%(guid)s</guid>
</item>\n"""

