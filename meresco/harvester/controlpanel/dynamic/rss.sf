## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2010-2011 Maastricht University Library http://www.maastrichtuniversity.nl/web/Library/home.htm
# Copyright (C) 2010-2011 Seek You Too B.V. (CQ2) http://www.cq2.nl
# Copyright (C) 2011-2012, 2015, 2017, 2021 Seecr (Seek You Too B.V.) https://seecr.nl
# Copyright (C) 2012, 2015 Stichting Kennisnet http://www.kennisnet.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def main(tag, path, arguments, **kwargs):
    aliases = observable.call.get_domain_aliases()

    pathArgs = path.split("/")[2:]
    if pathArgs == []:
        domainId = arguments.get('domainId', [None])[0]
        repositoryGroupId = arguments.get('repositoryGroupId', [None])[0]
        repositoryId = arguments.get('repositoryId', [None])[0]
    else:
        pathArgs = pathArgs + [None, None, None]
        domainId, repositoryGroupId, repositoryId = pathArgs[:3]
   
    originalDomainId = domainId
    domainId = aliases.get(domainId, domainId)

    parts = [originalDomainId]
    if repositoryGroupId is not None:
        parts.append(repositoryGroupId)
    if repositoryId is not None:
        parts.append(repositoryId)

    linkToStatusPage = "{}/showHarvesterStatus/{}".format(externalUrl, '/'.join(parts))

    status = observable.call.getStatus(domainId=domainId, repositoryGroupId=repositoryGroupId, repositoryId=repositoryId)[0]

    yield "HTTP/1.0 200 OK\r\n"
    yield "Content-Type: application/rss+xml\r\n"
    yield "\r\n"
    yield '<?xml version="1.0" encoding="UTF-8"?>\r\n'
    with tag("rss", version="2.0"):
        with tag("channel"):
            with tag("title"): yield f'Harvester status voor repository {repositoryId}'
            with tag("description"): yield f'Recente repository harvest status voor repository {repositoryId} in {domainId}'
            with tag("link"): yield linkToStatusPage
            with tag("ttl"): yield "360"

            lastHarvestAttempt = status.get("lastHarvestAttempt")
            if lastHarvestAttempt:
                with tag("item"):
                    with tag("title"):
                        if repositoryId is None:
                            yield f'Harvester status voor {repositoryGroupId}'
                        else:
                            yield f'Harvester status voor {repositoryId}'
                    with tag("description"):
                        items = [
                            ("Last harvest date", "lastHarvestDate"),
                            ("Total records", "total"),
                            ("Harvested records", "harvested"),
                            ("Uploaded records", "uploaded"),
                            ("Deleted records", "deleted"),
                            ("Validation errors", "invalid"),
                            ("Errors", "totalerrors"),
                        ]
                        for index, (label, name) in enumerate(items):
                            value = status.get(name)
                            yield f"{label}: {value}"
                            if (index+1) < len(items):
                                yield "<br/>"
                    with tag("link"):
                        yield linkToStatusPage
                    with tag("guid"):
                        yield lastHarvestAttempt[0]

