## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2021, 2024 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def render(func, showMenu=True, showLogin=True, **kwargs):
    session = kwargs.get("session", {})
    user = kwargs.get("user", None)
    tag = kwargs.get("tag")
    scripts = [
        "/js/jquery/jquery.min.js",
        f'/static/common.js?version={VERSION}',
    ]
    scripts.extend(kwargs.get('additionalScripts', []))
    scriptsModules = kwargs.get('additionalScripts', [])

    csss = [f"/static/common.css?version={VERSION}"]
    csss.extend(kwargs.get("additionalCss", []))
    bodyClasses = []
    bodyClasses.extend(kwargs.get("bodyClasses", []))

    yield """<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">"""
    with tag("html", xmlns="http://www.w3.org/1999/xhtml", lang="en", **{'xml:lang': 'en'}):
        with tag("head"):
            with tag("title"):
                yield "Harvester ({version})".format(version=VERSION)
            with tag("meta", content="text/html; charset=utf-8", **{"http-equiv": 'Content-Type'}): pass
            with tag("meta", content="no-cache", **{'http-equiv': 'Pragma'}): pass
            with tag("meta", content="no-cache", **{'http-equiv': 'Cache-Control'}): pass
            with tag("meta", content="-1", **{'http-equiv': 'Expires'}): pass
            with tag('meta', name="viewport", content="width=device-width, initial-scale=1"): pass
            with tag("link", href="/css/bootstrap/bootstrap.min.css", rel="stylesheet"): pass
            with tag("link", href="/css/bootstrap-icons/bootstrap-icons.css", rel="stylesheet"): pass
            with tag("link", href="https://cdn.datatables.net/1.11.3/css/dataTables.bootstrap5.min.css", rel="stylesheet"): pass

            for css in csss:
                with tag("link", rel="stylesheet", type_="text/css", href=css): pass
            with tag("link", rel="shortcut icon", href="/static/favicon.ico"): pass
        with tag("body", class_=bodyClasses):
            with tag('div.container-fluid'):
                if showMenu:
                    yield renderMenu(tag, user, showLogin=showLogin)
                with tag('main'):
                    with tag("div.alert.alert-danger.alert-dismissible.collapse", role="alert", id_="message-box"):
                        with tag("i.bi-exclamation-triangle-fill"): pass
                        with tag("strong.ps-3"): pass
                        with tag("button.btn-close", type_='button', **{'data-bs-dismiss': 'alert', 'aria-label': 'Close'}): pass
                    yield func(**kwargs)
                # with tag('footer'):
                #
            for src in scripts:
                with tag('script', type_='text/javascript', src=src): pass
            with tag("script", src="/js/bootstrap/bootstrap.bundle.min.js"): pass
            with tag("script", src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"): pass
            with tag("script", src="https://cdn.datatables.net/1.11.3/js/dataTables.bootstrap5.min.js"): pass
            yield renderModal(tag)


def renderMenu(tag, user, showLogin=True):
    with tag('header.d-flex.flex-column.flex-md-row.align-items-center.px-md-4.mb-3.border-bottom.shadow-sm'):
        with tag('div.container-fluid'):
            with tag("nav.navbar.navbar-expand-lg.navbar-light"):
                with tag('a.navbar-brand', href='/'):
                    with tag("img.img-fluid", src="/static/seecr.png", title="Seecr"): pass
                    yield "Harvester Control Panel"
                with tag('button.navbar-toggler', type_='button', **{
                    "data-bs-toggle": "collapse",
                    "data-bs-target": "#navbarNavAltMarkup",
                    "aria-controls": "navbarNavAltMarkup",
                    "aria-expanded": "false",
                    "aria-label": "Toggle navigation",}):
                    with tag('span.navbar-toggler-icon'): pass
                with tag('div.collapse.navbar-collapse.justify-content-end', id_="navbarNavAltMarkup"):
                    with tag('div.navbar-nav'):
                        if user:
                            if user.isAdmin():
                                for link,label in [
                                        ('/domains', 'Domeinen'),
                                        ('/groups', 'Groepen'),
                                        ('/users', 'Gebuikers')]:
                                    with tag("a.nav-link.pe-3", href=link): yield label
                            else:
                                with tag("a.nav-link.pe3", href="/domains"): yield 'Domeinen'
                        else:
                            if showLogin:
                                #with tag("a.btn.nav-link", id_="BtnLogin", href='/login'): yield "Inloggen"
                                with tag("button.btn.nav-link", id_="BtnLogin"): yield "Inloggen"
                        if user:
                            with tag("ul.navbar-nav"):
                                with tag("li.nav-item.dropdown"):
                                    with tag("a.nav-link.dropdown-toggle", href="", role="button", **{
                                            "data-bs-toggle": "dropdown",
                                            "aria-expanded": "false"}):
                                        shield = 'bi-shield-check' if user.isAdmin() else 'bi-shield'
                                        with tag(f"i.bi.{shield}.pe-1.text-success"): yield ''
                                        yield user.name
                                    with tag("ul.dropdown-menu.dropdown-menu-end"):
                                        with tag("li"):
                                            with tag("a.dropdown-item", href="/account"):
                                                yield "Account"
                                        with tag("li"):
                                            with tag("hr.dropdown-divider"): pass
                                        with tag("li"):
                                            with tag("a.dropdown-item", href="/logout"):
                                                yield "Uitloggen"

def url(path, **kwargs):
    return path if len(kwargs) == 0 else "{}?{}".format(path, urlencode(kwargs))

def findPath(wantedPath, mapping, **kwargs):
    path = kwargs.get('path')
    if '/{}/'.format(wantedPath) in path:
        selector = path.rsplit('/', 1)[-1]
        return mapping.get(selector, None)

def card(title, body, icon=None, link=None, **kwargs):
    tag = kwargs.get('tag')
    with tag("div.card.mb-3"):
        with tag("div.card-header"):
            with tag("div.d-flex.flex-row"):
                with tag("div.w-100"):
                    with tag("h5.m-0"):
                        if not icon is None:
                            with tag("i", class_=['bi-{}'.format(icon)]): pass
                        with tag("span", class_=["ps-2" if not icon is None else '']):
                            yield title
                if not link is None:
                    yield link['func'](**link['kwargs'])

        with tag("div.card-body"):
            yield body(**kwargs)

def renderModal(tag):
    with tag("div.modal", tabindex="-1", role="dialog", id_="modal"):
        with tag("div.modal-dialog"):
            with tag("div.modal-content"):
                with tag("div.modal-header"):
                    with tag("h5.modal-title", id_="placeholder_modal-title"):
                        yield ""
                    with tag("button.btn-close", type_="button", **{"data-bs-dismiss": 'modal', 'aria-label': 'Close'}):
                        pass
                with tag("div.modal-body", id_="placeholder_modal-body"):
                    pass

def breadcrumbs(tag, items=None):
    items = items or []
    def breadcrumbItem(tag, label, href=None, active=False):
        liKwargs = {'aria-current': 'page'} if active else {}
        with tag("li.breadcrumb-item", class_=['active'] if active else [], **liKwargs):
            if not active:
                with tag("a", href=href):
                    yield label
            else:
                yield label

    with tag("nav", **{'aria-label': "breadcrumb"}):
        with tag("ol.breadcrumb"):
            yield breadcrumbItem(tag, "Home", "/", active=len(items) == 0)
            for each in items:
                yield breadcrumbItem(tag, **each)

def thead(tag, ths):
    with tag("thead"):
        with tag("tr"):
            for each in ths:
                with tag("th"): yield each

def floatingLabel(func):
    def f(tag, *args, **kwargs):
        label = kwargs.get("label", "")
        helpText = kwargs.get("helpText", "")
        with tag("div.form-floating"):
            controlId = uuid()
            yield func(tag, *args, controlId=controlId, **kwargs)
            with tag("label"):
                yield label

            if helpText != "":
                with tag("div"):
                    with tag("button.btn.seecr-btn.helpText", **{'data-helptext': helpText, 'data-caption': label}):
                        with tag("i.bi.bi-question-circle"): yield ""
    return f

@floatingLabel
def dropdown(tag, label, items, name, controlId, selected=None):
    with tag("select.form-select", id_=controlId, name=name):
        for value, each in items:
            with tag("option", value=str(value), selected="SELECTED" if value == selected else ""):
                yield each

@floatingLabel
def numberInput(tag, label, name, minValue, maxValue, value, controlId):
    with tag("input.form-control", id_=controlId, type_="number", name=name, min_=minValue, max_=maxValue, value=str(value)):
        yield ''

@floatingLabel
def textInput(tag, label, name, value, controlId):
    with tag("input.form-control", id_=controlId, type_="text", name=name, value=str(value), placeholder=label):
        yield ''

@floatingLabel
def textLabel(tag, label, value, controlId):
    with tag("input.form-control", id_=controlId, type_="text", value=str(value), readonly=True):
        yield ''

@floatingLabel
def checkbox(tag, label, name, controlId, checked=False, helpText=""):
    with tag("div.form-check.form-switch.form-control"):
        with tag("input.form-check-input",
            style="margin-left: 0em",
            id_=controlId,
            type_="checkbox",
            name=name,
            checked="checked" if checked else ""): yield ""

@floatingLabel
def selectList(tag, label, items, name, controlId, selected=None, height=None):
    selected = selected or []
    with tag("select.form-select", multiple="multiple", name=name, id_=controlId, style=f"height: {height}" if not height is None else ''):
        for value, each in items:
            with tag("option", value=str(value), selected="SELECTED" if value in selected else ""):
                yield each

@floatingLabel
def textarea(tag, label, name, value, controlId, wrap=None, extraClasses=None, height=None):
    with tag("textarea.form-control", class_=extraClasses or [], name=name, id_=controlId, wrap=wrap, style=f"height: {height}" if not height is None else ''):
        yield value

def main(**kwargs):
    renderFunc = findPath("modal", dict(helpText=_renderHelp), **kwargs)
    if not renderFunc is None:
        yield renderFunc(**kwargs)

def _renderHelp(tag, arguments, **kwargs):
    text = arguments.get("text", [""])[0]
    with tag("div.d-flex.flex-column"):
        with tag("div"):
            yield text
        with tag("div.d-flex.flex-row-reverse"):
            with tag("button.btn.btn-small.btn-primary"):
                yield "OK"

def shorten(text, length=25):
    if len(text) < length:
        return text
    visible = length // 3
    return text[:visible] + "..." + text[-visible:]

