## begin license ##
#
# "Seecr Metastreams" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Seecr Metastreams"
#
# "Seecr Metastreams" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Seecr Metastreams" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Seecr Metastreams"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def render(func, session=None, user=None, showMenu=True, **kwargs):
    session = session or {}
    tag = kwargs.get("tag")
    scripts = [
        "/js/jquery/jquery.min.js",
        '/static/common.js',
    ]
    scripts.extend(kwargs.get('additionalScripts', []))

    csss = ["/static/common.css"]
    csss.extend(kwargs.get("additionalCss", []))
    bodyClasses = []
    bodyClasses.extend(kwargs.get("bodyClasses", []))

    yield """<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">"""
    with tag("html", xmlns="http://www.w3.org/1999/xhtml", lang="en", **{'xml:lang': 'en'}):
        with tag("head"):
            with tag("title"):
                yield "Seecr Metastreams ({version})".format(version=VERSION)
            with tag("meta", content="text/html; charset=utf-8", **{"http-equiv": 'Content-Type'}): pass
            with tag("meta", content="no-cache", **{'http-equiv': 'Pragma'}): pass
            with tag("meta", content="no-cache", **{'http-equiv': 'Cache-Control'}): pass
            with tag("meta", content="-1", **{'http-equiv': 'Expires'}): pass
            with tag('meta', name="viewport", content="width=device-width, initial-scale=1"): pass
            with tag('link', href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css",
                    rel="stylesheet",
                    integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6",
                    crossorigin="anonymous"): pass
            with tag("link",
                    rel="stylesheet",
                    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css"): pass

            for css in csss:
                with tag("link", rel="stylesheet", type_="text/css", href=css): pass
            with tag("link", rel="shortcut icon", href="/static/favicon.ico"): pass
        with tag("body", class_=bodyClasses):
            with tag('div.container-fluid'):
                if showMenu:
                    yield renderMenu(tag, user)
                with tag('main'):
                    with tag("div.alert.alert-danger.alert-dismissible.collapse", role="alert", id_="message-box"):
                        with tag("i.bi-exclamation-triangle-fill"): pass
                        with tag("strong.ps-3"): pass
                        with tag("button.btn-close", type_='button', **{'data-bs-dismiss': 'alert', 'aria-label': 'Close'}): pass
                    yield func(**kwargs)
                # with tag('footer'):
                #
            for src in scripts:
                with tag('script', type_='text/javascript', src=src): pass
            with tag('script', src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js",
                    integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf",
                    crossorigin="anonymous"): pass


def renderMenu(tag, user):
    with tag('header.d-flex.flex-column.flex-md-row.align-items-center.p-3.px-md-4.mb-3.border-bottom.shadow-sm'):
        with tag("nav.navbar.navbar-expand-lg.navbar-light"):
            with tag('div.container-fluid'):
                with tag('a.navbar-brand', href='/'):
                    # with tag('img' ...
                    yield "Metastreams Control Panel"
                with tag('button.navbar-toggler', type_='button', **{
                    "data-bs-toggle": "collapse",
                    "data-bs-target": "#navbarNavAltMarkup",
                    "aria-controls": "navbarNavAltMarkup",
                    "aria-expanded": "false",
                    "aria-label": "Toggle navigation",}):
                    with tag('span.navbar-toggler-icon'): pass
                with tag('div.collapse.navbar-collapse'):
                    with tag('div.navbar-nav'):
                        if user:
                            if user.isAdmin():
                                with tag("a.nav-link", href="/domains"): yield 'Domeinen'
                                with tag("a.nav-link", href="/groups"): yield 'Groepen'
                                with tag("a.nav-link", href="/groups"): yield 'Accounts'
                            with tag("a.nav-link", href="#"): yield 'Mijn Account'
                            with tag("a.nav-link", href="/logout"): yield "Uitloggen"

def findPath(wantedPath, mapping, **kwargs):
    path = kwargs.get('path')
    if '/{}/'.format(wantedPath) in path:
        selector = path.rsplit('/', 1)[-1]
        return mapping.get(selector, None)

def card(title, body, **kwargs):
    tag = kwargs.get('tag')
    with tag("div.card"):
        with tag("div.card-header"):
            with tag("h5"):
                yield title
        with tag("div.card-body"):
            yield body(**kwargs)
