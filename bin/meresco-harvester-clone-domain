#!/usr/bin/env python
## begin license ##
#
# "Metastreams Harvester" is a fork of Meresco Harvester that demonstrates
# the translation of traditional metadata into modern events streams.
#
# Copyright (C) 2021 Seecr (Seek You Too B.V.) https://seecr.nl
#
# This file is part of "Metastreams Harvester"
#
# "Metastreams Harvester" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Metastreams Harvester" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Metastreams Harvester"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from simplejson import load, dump
from sys import argv
from os.path import join, isfile
from uuid import uuid4


DATADIR=[line.strip() for line in open('/etc/meresco-harvester/config').readlines() if line.startswith("DATADIR=")][0].split("=")[1] isfile('/etc/meresco-harvester/config') else '.'

def newUuid():
    return str(uuid4())

def main(oldDomainId, newDomainId):
    if not isfile("{}.domain".format(oldDomainId)):
        print "Domain not found"
        return

    domain = load(open(join(DATADIR, "{}.domain".format(oldDomainId))))
    domain['identifier'] = newDomainId

    #
    # Mappings
    #
    newMappingIds = []
    for mappingId in domain['mappingIds']:
        if not isfile('{}.mapping'.format(mappingId)):
            print "Skipping {}, no mapping file found".format(targetId)
            continue
        mappingInfo = load(open(join(DATADIR, "{}.mapping".format(mappingId))))
        newMappingId = newUuid()
        newMappingIds.append(newMappingId)
        mappingInfo['identifier'] = newMappingId
        dump(mappingInfo, open(join(DATADIR, "{}.mapping".format(newMappingId)), "w"), indent=4)
    domain['mappingIds'] = newMappingIds

    #
    # Targets
    #
    newTargetIds = []
    for targetId in domain['targetIds']:
        if not isfile('{}.target'.format(targetId)):
            print "Skipping {}, no target file found".format(targetId)
            continue
        targetInfo = load(open(join(DATADIR, "{}.target".format(targetId))))
        newTargetId = newUuid()
        newTargetIds.append(newTargetId)
        targetInfo['identifier'] = newTargetId
        dump(targetInfo, open(join(DAATDIR, "{}.target".format(newTargetId)), 'w'), indent=4)
    domain['targetIds'] = newTargetIds

    #
    # RepositoryGroupIds
    #
    newRepositoryGroupsIds = []
    for repositoryGroupId in domain['repositoryGroupIds']:
        oldRepositoryGroupFile = join(DATADIR, "{}.{}.repositoryGroup".format(oldDomainId, repositoryGroupId))
        newRepositoryGroupFile = join(DATADIR, "{}.{}.repositoryGroup".format(newDomainId, repositoryGroupId))
        if not isfile(oldRepositoryGroupFile):
            print "Skipping '{}', no repositoryGroup file found".format(repositoryGroupId)
            continue
        newRepositoryGroupsIds.append(repositoryGroupId)

        repositoryGroup = load(open(oldRepositoryGroupFile))
        newRepositoryIds = []
        for repositoryId in repositoryGroup['repositoryIds']:
            oldRepositoryFile = join(DATADIR, "{}.{}.repository".format(oldDomainId, repositoryId))
            newRepositoryFile = join(DATADIR, "{}.{}.repository".format(newDomainId, repositoryId))
            if not isfile(oldRepositoryFile):
                print "Skipping '{}', no repository file found".format(repositoryId)
                continue
            newRepositoryIds.append(repositoryId)
            
            repository = load(open(oldRepositoryFile))
            repository['mappingId'] = domain['mappingIds'][0]
            repository['targetId'] = domain['targetIds'][0]
            dump(repository, open(newRepositoryFile, "w"), ident=4)
        repositoryGroup['repositoryIds'] = newRepositoryIds
        dump(repositoryGroup, open(newRepositoryGroupFile, "w"), indent=4)

    domain['repositoryGroupIds'] = newRepositoryGroupsIds
    dump(domain, open(join(DATADIR, "{}.domain".format(newDomainId)), "w"), indent=4)


if __name__ == '__main__':
    args = argv[1:]
    if len(args) != 2:
        print "Specify the old and new domainname"
    else:
        main(*args)

